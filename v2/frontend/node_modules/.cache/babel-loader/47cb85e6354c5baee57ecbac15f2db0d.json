{"ast":null,"code":"import find from 'lodash/find';\nimport getAst from './getAst'; // Strip semicolon (;) at the end\n\nvar unsemicolon = function unsemicolon(s) {\n  return s.replace(/;\\s*$/, '');\n};\n/**\n * Take source code and returns:\n * 1. Code before the last top-level expression.\n * 2. Code with the last top-level expression wrapped in a return statement\n *    (kind of an implicit return).\n *\n * Example:\n * var a = 1; React.createElement('i', null, a); // =>\n * 1. var a = 1\n * 2. var a = 1; return (React.createElement('i', null, a));\n */\n\n\nexport default function splitExampleCode(code) {\n  var ast = getAst(code);\n\n  if (!ast) {\n    return {\n      head: '',\n      example: code\n    };\n  }\n\n  var firstExpression = find(ast.body.reverse(), {\n    type: 'ExpressionStatement'\n  });\n\n  if (!firstExpression) {\n    return {\n      head: '',\n      example: code\n    };\n  }\n\n  var start = firstExpression.start,\n      end = firstExpression.end;\n  var head = unsemicolon(code.substring(0, start));\n  var firstExpressionCode = unsemicolon(code.substring(start, end));\n  var example = head + \";\\nreturn (\" + firstExpressionCode + \");\";\n  return {\n    head: head,\n    example: example\n  };\n}","map":{"version":3,"names":["find","getAst","unsemicolon","s","replace","splitExampleCode","code","ast","head","example","firstExpression","body","reverse","type","start","end","substring","firstExpressionCode"],"sources":["/Users/sebastien/Sebbe's Cloud/School/OpenClassRooms/2 - OCR - Software Developper - JS & React/Projet 12 (60h)/P12 - Mission/0Code/frontend/node_modules/react-styleguidist/lib/client/utils/splitExampleCode.js"],"sourcesContent":["import \"core-js/modules/es.regexp.exec\";\nimport \"core-js/modules/es.string.replace\";\nimport find from 'lodash/find';\nimport getAst from './getAst'; // Strip semicolon (;) at the end\n\nvar unsemicolon = function unsemicolon(s) {\n  return s.replace(/;\\s*$/, '');\n};\n/**\n * Take source code and returns:\n * 1. Code before the last top-level expression.\n * 2. Code with the last top-level expression wrapped in a return statement\n *    (kind of an implicit return).\n *\n * Example:\n * var a = 1; React.createElement('i', null, a); // =>\n * 1. var a = 1\n * 2. var a = 1; return (React.createElement('i', null, a));\n */\n\n\nexport default function splitExampleCode(code) {\n  var ast = getAst(code);\n\n  if (!ast) {\n    return {\n      head: '',\n      example: code\n    };\n  }\n\n  var firstExpression = find(ast.body.reverse(), {\n    type: 'ExpressionStatement'\n  });\n\n  if (!firstExpression) {\n    return {\n      head: '',\n      example: code\n    };\n  }\n\n  var start = firstExpression.start,\n      end = firstExpression.end;\n  var head = unsemicolon(code.substring(0, start));\n  var firstExpressionCode = unsemicolon(code.substring(start, end));\n  var example = head + \";\\nreturn (\" + firstExpressionCode + \");\";\n  return {\n    head: head,\n    example: example\n  };\n}"],"mappings":"AAEA,OAAOA,IAAP,MAAiB,aAAjB;AACA,OAAOC,MAAP,MAAmB,UAAnB,C,CAA+B;;AAE/B,IAAIC,WAAW,GAAG,SAASA,WAAT,CAAqBC,CAArB,EAAwB;EACxC,OAAOA,CAAC,CAACC,OAAF,CAAU,OAAV,EAAmB,EAAnB,CAAP;AACD,CAFD;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,eAAe,SAASC,gBAAT,CAA0BC,IAA1B,EAAgC;EAC7C,IAAIC,GAAG,GAAGN,MAAM,CAACK,IAAD,CAAhB;;EAEA,IAAI,CAACC,GAAL,EAAU;IACR,OAAO;MACLC,IAAI,EAAE,EADD;MAELC,OAAO,EAAEH;IAFJ,CAAP;EAID;;EAED,IAAII,eAAe,GAAGV,IAAI,CAACO,GAAG,CAACI,IAAJ,CAASC,OAAT,EAAD,EAAqB;IAC7CC,IAAI,EAAE;EADuC,CAArB,CAA1B;;EAIA,IAAI,CAACH,eAAL,EAAsB;IACpB,OAAO;MACLF,IAAI,EAAE,EADD;MAELC,OAAO,EAAEH;IAFJ,CAAP;EAID;;EAED,IAAIQ,KAAK,GAAGJ,eAAe,CAACI,KAA5B;EAAA,IACIC,GAAG,GAAGL,eAAe,CAACK,GAD1B;EAEA,IAAIP,IAAI,GAAGN,WAAW,CAACI,IAAI,CAACU,SAAL,CAAe,CAAf,EAAkBF,KAAlB,CAAD,CAAtB;EACA,IAAIG,mBAAmB,GAAGf,WAAW,CAACI,IAAI,CAACU,SAAL,CAAeF,KAAf,EAAsBC,GAAtB,CAAD,CAArC;EACA,IAAIN,OAAO,GAAGD,IAAI,GAAG,aAAP,GAAuBS,mBAAvB,GAA6C,IAA3D;EACA,OAAO;IACLT,IAAI,EAAEA,IADD;IAELC,OAAO,EAAEA;EAFJ,CAAP;AAID"},"metadata":{},"sourceType":"module"}