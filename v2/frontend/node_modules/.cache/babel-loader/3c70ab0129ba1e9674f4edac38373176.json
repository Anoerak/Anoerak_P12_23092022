{"ast":null,"code":"import { ActivityModel } from '../models/ActivityModel';\nimport { AverageSessionModel } from '../models/AverageSessionModel';\nimport { PerformanceModel } from '../models/PerformanceModel';\nimport { TodayScoreModel } from '../models/TodayScoreModel';\n/**\n *\n * Class API is a class that contains all the API calls and their respective\n * models.\n * @class API\n * @param {number} id - The id of the user.\n * @param {string} path - The type of data to be fetched.\n *  (e.g. 'activity', 'performance', 'average-session', 'today-score')\n * @returns {object} - The data fetched from the API.\n *\n */\n\nexport class API {\n  constructor(id, path) {\n    /* The type of activity to be fetched. */\n    this.path = path;\n    /* The Boolean value that indicate the type of data to be fetched (API or Mocked). */\n\n    this.mockedStatus = localStorage.getItem('mockedDatas');\n    /* the url based on the mocked status and the parameters (with or without path). */\n\n    this.apiUrl = path === undefined ? `http://localhost:8080/user/${id}` : `http://localhost:8080/user/${id}/${path}`;\n    this.mockedUrl = path === undefined ? `../../data/${id}/datas.json` : `../../data/${id}/${path}/datas.json`;\n    this.url = this.mockedStatus === 'true' ? this.mockedUrl : this.apiUrl;\n    /* The returned values from the API. */\n\n    this.datas = [];\n    this.loading = false;\n    this.error = false;\n    this.errorMessage = '';\n  }\n  /**\n   *\n   * Return the user datas from route '.../user/:id'.\n   * @returns {array} The data fetched from the API.\n   * @returns {boolean} The loading status of the API.\n   * @returns {boolean} The error status of the API.\n   * @returns {string} The error message of the API.\n   *\n   */\n\n\n  async getUserDatas() {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(this.url);\n        const data = await response.json(); // console.log(data.data);\n\n        this.loading = false;\n        this.error = false;\n        this.errorMessage = '';\n        this.datas.push(data.data, this.loading, this.error, this.errorMessage);\n        return this.datas;\n      } catch (error) {\n        this.loading = false;\n        this.error = true;\n        this.errorMessage = error;\n        this.datas.push(this.datas, this.loading, this.error, this.errorMessage);\n      }\n    };\n\n    await fetchData();\n    return this.datas;\n  }\n  /**\n   *\n   * Return the user activity datas from '.../user/:id/activity'.\n   * @returns {object} The data fetched from the API.\n   * @returns {boolean} The loading status of the API.\n   * @returns {boolean} The error status of the API.\n   * @returns {string} The error message of the API.\n   *\n   */\n\n\n  async getActivityDatas() {\n    const data = await this.getUserDatas();\n    const activityDatas = new ActivityModel(data);\n    const processedDatas = activityDatas.getSessions(); // console.log(processedDatas);\n\n    return processedDatas;\n  }\n  /**\n   *\n   * Return the user average session datas from '.../user/:id/average-sessions'.\n   * @returns {object} The data fetched from the API.\n   * @returns {boolean} The loading status of the API.\n   * @returns {boolean} The error status of the API.\n   * @returns {string} The error message of the API.\n   *\n   */\n\n\n  async getAverageSessionDatas() {\n    const data = await this.getUserDatas();\n    const averageSessions = new AverageSessionModel(data);\n    const processedDatas = averageSessions.getProcessedDatas(); // console.log(processedDatas);\n\n    return processedDatas;\n  }\n  /**\n   *\n   * Return the user performance datas from '.../user/:id/performance'.\n   * @returns {object} The data fetched from the API.\n   * @returns {boolean} The loading status of the API.\n   * @returns {boolean} The error status of the API.\n   * @returns {string} The error message of the API.\n   *\n   */\n\n\n  async getPerformanceDatas() {\n    const data = await this.getUserDatas();\n    const performanceDatas = new PerformanceModel(data);\n    const processedDatas = performanceDatas.getProcessedDatas(); // console.log(processedDatas);\n\n    return processedDatas;\n  }\n  /**\n   *\n   * Return the user today score datas from '.../user/:id/today-score'.\n   * @returns {object} The data fetched from the API.\n   * @returns {boolean} The loading status of the API.\n   * @returns {boolean} The error status of the API.\n   * @returns {string} The error message of the API.\n   *\n   */\n\n\n  async getTodayScoreDatas() {\n    const data = await this.getUserDatas();\n    const todayScoreDatas = new TodayScoreModel(data[0]);\n    const processedDatas = todayScoreDatas.getTodayScore(); // console.log(processedDatas);\n\n    return processedDatas;\n  }\n  /**\n   * Global function which the user datas based on the 'path' value.\n   * @returns {object} The data fetched from the API.\n   * @returns {boolean} The loading status of the API.\n   * @returns {boolean} The error status of the API.\n   * @returns {string} The error message of the API.\n   */\n\n\n  async getDatas() {\n    switch (this.path) {\n      case 'activity':\n        return await this.getActivityDatas();\n\n      case 'average-sessions':\n        return await this.getAverageSessionDatas();\n\n      case 'performance':\n        return await this.getPerformanceDatas();\n\n      case 'today-score':\n        return await this.getTodayScoreDatas();\n\n      default:\n        return this.getUserDatas();\n    }\n  }\n\n}","map":{"version":3,"names":["ActivityModel","AverageSessionModel","PerformanceModel","TodayScoreModel","API","constructor","id","path","mockedStatus","localStorage","getItem","apiUrl","undefined","mockedUrl","url","datas","loading","error","errorMessage","getUserDatas","fetchData","response","fetch","data","json","push","getActivityDatas","activityDatas","processedDatas","getSessions","getAverageSessionDatas","averageSessions","getProcessedDatas","getPerformanceDatas","performanceDatas","getTodayScoreDatas","todayScoreDatas","getTodayScore","getDatas"],"sources":["/Users/sebastien/Sebbe's Cloud/School/OpenClassRooms/2 - OCR - Software Developper - JS & React/Projet 12 (60h)/P12 - Mission/00Code/frontend/src/API/api.js"],"sourcesContent":["import { ActivityModel } from '../models/ActivityModel';\nimport { AverageSessionModel } from '../models/AverageSessionModel';\nimport { PerformanceModel } from '../models/PerformanceModel';\nimport { TodayScoreModel } from '../models/TodayScoreModel';\n\n/**\n *\n * Class API is a class that contains all the API calls and their respective\n * models.\n * @class API\n * @param {number} id - The id of the user.\n * @param {string} path - The type of data to be fetched.\n *  (e.g. 'activity', 'performance', 'average-session', 'today-score')\n * @returns {object} - The data fetched from the API.\n *\n */\n\nexport class API {\n\tconstructor(id, path) {\n\t\t/* The type of activity to be fetched. */\n\t\tthis.path = path;\n\t\t/* The Boolean value that indicate the type of data to be fetched (API or Mocked). */\n\t\tthis.mockedStatus = localStorage.getItem('mockedDatas');\n\t\t/* the url based on the mocked status and the parameters (with or without path). */\n\t\tthis.apiUrl =\n\t\t\tpath === undefined ? `http://localhost:8080/user/${id}` : `http://localhost:8080/user/${id}/${path}`;\n\t\tthis.mockedUrl = path === undefined ? `../../data/${id}/datas.json` : `../../data/${id}/${path}/datas.json`;\n\t\tthis.url = this.mockedStatus === 'true' ? this.mockedUrl : this.apiUrl;\n\t\t/* The returned values from the API. */\n\t\tthis.datas = [];\n\t\tthis.loading = false;\n\t\tthis.error = false;\n\t\tthis.errorMessage = '';\n\t}\n\n\t/**\n\t *\n\t * Return the user datas from route '.../user/:id'.\n\t * @returns {array} The data fetched from the API.\n\t * @returns {boolean} The loading status of the API.\n\t * @returns {boolean} The error status of the API.\n\t * @returns {string} The error message of the API.\n\t *\n\t */\n\tasync getUserDatas() {\n\t\tconst fetchData = async () => {\n\t\t\ttry {\n\t\t\t\tconst response = await fetch(this.url);\n\t\t\t\tconst data = await response.json();\n\t\t\t\t// console.log(data.data);\n\t\t\t\tthis.loading = false;\n\t\t\t\tthis.error = false;\n\t\t\t\tthis.errorMessage = '';\n\t\t\t\tthis.datas.push(data.data, this.loading, this.error, this.errorMessage);\n\t\t\t\treturn this.datas;\n\t\t\t} catch (error) {\n\t\t\t\tthis.loading = false;\n\t\t\t\tthis.error = true;\n\t\t\t\tthis.errorMessage = error;\n\t\t\t\tthis.datas.push(this.datas, this.loading, this.error, this.errorMessage);\n\t\t\t}\n\t\t};\n\t\tawait fetchData();\n\t\treturn this.datas;\n\t}\n\n\t/**\n\t *\n\t * Return the user activity datas from '.../user/:id/activity'.\n\t * @returns {object} The data fetched from the API.\n\t * @returns {boolean} The loading status of the API.\n\t * @returns {boolean} The error status of the API.\n\t * @returns {string} The error message of the API.\n\t *\n\t */\n\tasync getActivityDatas() {\n\t\tconst data = await this.getUserDatas();\n\t\tconst activityDatas = new ActivityModel(data);\n\t\tconst processedDatas = activityDatas.getSessions();\n\t\t// console.log(processedDatas);\n\t\treturn processedDatas;\n\t}\n\n\t/**\n\t *\n\t * Return the user average session datas from '.../user/:id/average-sessions'.\n\t * @returns {object} The data fetched from the API.\n\t * @returns {boolean} The loading status of the API.\n\t * @returns {boolean} The error status of the API.\n\t * @returns {string} The error message of the API.\n\t *\n\t */\n\tasync getAverageSessionDatas() {\n\t\tconst data = await this.getUserDatas();\n\t\tconst averageSessions = new AverageSessionModel(data);\n\t\tconst processedDatas = averageSessions.getProcessedDatas();\n\t\t// console.log(processedDatas);\n\t\treturn processedDatas;\n\t}\n\n\t/**\n\t *\n\t * Return the user performance datas from '.../user/:id/performance'.\n\t * @returns {object} The data fetched from the API.\n\t * @returns {boolean} The loading status of the API.\n\t * @returns {boolean} The error status of the API.\n\t * @returns {string} The error message of the API.\n\t *\n\t */\n\tasync getPerformanceDatas() {\n\t\tconst data = await this.getUserDatas();\n\t\tconst performanceDatas = new PerformanceModel(data);\n\t\tconst processedDatas = performanceDatas.getProcessedDatas();\n\t\t// console.log(processedDatas);\n\t\treturn processedDatas;\n\t}\n\n\t/**\n\t *\n\t * Return the user today score datas from '.../user/:id/today-score'.\n\t * @returns {object} The data fetched from the API.\n\t * @returns {boolean} The loading status of the API.\n\t * @returns {boolean} The error status of the API.\n\t * @returns {string} The error message of the API.\n\t *\n\t */\n\tasync getTodayScoreDatas() {\n\t\tconst data = await this.getUserDatas();\n\t\tconst todayScoreDatas = new TodayScoreModel(data[0]);\n\t\tconst processedDatas = todayScoreDatas.getTodayScore();\n\t\t// console.log(processedDatas);\n\t\treturn processedDatas;\n\t}\n\n\t/**\n\t * Global function which the user datas based on the 'path' value.\n\t * @returns {object} The data fetched from the API.\n\t * @returns {boolean} The loading status of the API.\n\t * @returns {boolean} The error status of the API.\n\t * @returns {string} The error message of the API.\n\t */\n\tasync getDatas() {\n\t\tswitch (this.path) {\n\t\t\tcase 'activity':\n\t\t\t\treturn await this.getActivityDatas();\n\t\t\tcase 'average-sessions':\n\t\t\t\treturn await this.getAverageSessionDatas();\n\t\t\tcase 'performance':\n\t\t\t\treturn await this.getPerformanceDatas();\n\t\t\tcase 'today-score':\n\t\t\t\treturn await this.getTodayScoreDatas();\n\t\t\tdefault:\n\t\t\t\treturn this.getUserDatas();\n\t\t}\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}