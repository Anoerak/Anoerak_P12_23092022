{"ast":null,"code":"var _extends = Object.assign || function (a) {\n  for (var b, c = 1; c < arguments.length; c++) for (var d in b = arguments[c], b) Object.prototype.hasOwnProperty.call(b, d) && (a[d] = b[d]);\n\n  return a;\n},\n    _typeof = typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol' ? function (a) {\n  return typeof a;\n} : function (a) {\n  return a && typeof Symbol == 'function' && a.constructor === Symbol && a !== Symbol.prototype ? 'symbol' : typeof a;\n};\n\nfunction _objectWithoutProperties(a, b) {\n  var c = {};\n\n  for (var d in a) b.indexOf(d) >= 0 || Object.prototype.hasOwnProperty.call(a, d) && (c[d] = a[d]);\n\n  return c;\n}\n\nimport React from 'react';\nimport unquote from 'unquote';\nvar ATTRIBUTE_TO_JSX_PROP_MAP = {\n  accesskey: 'accessKey',\n  allowfullscreen: 'allowFullScreen',\n  allowtransparency: 'allowTransparency',\n  autocomplete: 'autoComplete',\n  autofocus: 'autoFocus',\n  autoplay: 'autoPlay',\n  cellpadding: 'cellPadding',\n  cellspacing: 'cellSpacing',\n  charset: 'charSet',\n  class: 'className',\n  classid: 'classId',\n  colspan: 'colSpan',\n  contenteditable: 'contentEditable',\n  contextmenu: 'contextMenu',\n  crossorigin: 'crossOrigin',\n  enctype: 'encType',\n  for: 'htmlFor',\n  formaction: 'formAction',\n  formenctype: 'formEncType',\n  formmethod: 'formMethod',\n  formnovalidate: 'formNoValidate',\n  formtarget: 'formTarget',\n  frameborder: 'frameBorder',\n  hreflang: 'hrefLang',\n  inputmode: 'inputMode',\n  keyparams: 'keyParams',\n  keytype: 'keyType',\n  marginheight: 'marginHeight',\n  marginwidth: 'marginWidth',\n  maxlength: 'maxLength',\n  mediagroup: 'mediaGroup',\n  minlength: 'minLength',\n  novalidate: 'noValidate',\n  radiogroup: 'radioGroup',\n  readonly: 'readOnly',\n  rowspan: 'rowSpan',\n  spellcheck: 'spellCheck',\n  srcdoc: 'srcDoc',\n  srclang: 'srcLang',\n  srcset: 'srcSet',\n  tabindex: 'tabIndex',\n  usemap: 'useMap'\n},\n    namedCodesToUnicode = {\n  amp: '&',\n  apos: '\\'',\n  gt: '>',\n  lt: '<',\n  nbsp: '\\xA0',\n  quot: '\\u201C'\n},\n    DO_NOT_PROCESS_HTML_ELEMENTS = ['style', 'script'],\n    ATTR_EXTRACTOR_R = /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi,\n    AUTOLINK_MAILTO_CHECK_R = /mailto:/i,\n    BLOCK_END_R = /\\n{2,}$/,\n    BLOCKQUOTE_R = /^( *>[^\\n]+(\\n[^\\n]+)*\\n*)+\\n{2,}/,\n    BLOCKQUOTE_TRIM_LEFT_MULTILINE_R = /^ *> ?/gm,\n    BREAK_LINE_R = /^ {2,}\\n/,\n    BREAK_THEMATIC_R = /^(?:( *[-*_]) *){3,}(?:\\n *)+\\n/,\n    CODE_BLOCK_FENCED_R = /^\\s*(`{3,}|~{3,}) *(\\S+)? *\\n([\\s\\S]+?)\\s*\\1 *(?:\\n *)+\\n?/,\n    CODE_BLOCK_R = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/,\n    CODE_INLINE_R = /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/,\n    CONSECUTIVE_NEWLINE_R = /^(?:\\n *)*\\n/,\n    CR_NEWLINE_R = /\\r\\n?/g,\n    FOOTNOTE_R = /^\\[\\^([^\\]]+)](:.*)\\n/,\n    FOOTNOTE_REFERENCE_R = /^\\[\\^([^\\]]+)]/,\n    FORMFEED_R = /\\f/g,\n    GFM_TASK_R = /^\\s*?\\[(x|\\s)\\]/,\n    HEADING_R = /^ *(#{1,6}) *([^\\n]+)\\n{0,2}/,\n    HEADING_SETEXT_R = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/,\n    HTML_BLOCK_ELEMENT_R = /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?([^>]*)\\/{0}>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1)[\\s\\S])*?)<\\/\\1>\\n*/i,\n    HTML_CHAR_CODE_R = /&([a-z]+);/g,\n    HTML_COMMENT_R = /^<!--.*?-->/,\n    HTML_CUSTOM_ATTR_R = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/,\n    HTML_SELF_CLOSING_ELEMENT_R = /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i,\n    INTERPOLATION_R = /^\\{.*\\}$/,\n    LINK_AUTOLINK_BARE_URL_R = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/,\n    LINK_AUTOLINK_MAILTO_R = /^<([^ >]+@[^ >]+)>/,\n    LINK_AUTOLINK_R = /^<([^ >]+:\\/[^ >]+)>/,\n    LIST_ITEM_END_R = / *\\n+$/,\n    LIST_LOOKBEHIND_R = /(?:^|\\n)( *)$/,\n    CAPTURE_LETTER_AFTER_HYPHEN = /-([a-z])?/gi,\n    NP_TABLE_R = /^(.*\\|?.*)\\n *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*)\\n?/,\n    PARAGRAPH_R = /^((?:[^\\n]|\\n(?! *\\n))+)(?:\\n *)+\\n/,\n    REFERENCE_IMAGE_OR_LINK = /^\\[([^\\]]*)\\]:\\s*(\\S+)\\s*(\"([^\"]*)\")?/,\n    REFERENCE_IMAGE_R = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/,\n    REFERENCE_LINK_R = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/,\n    SQUARE_BRACKETS_R = /(\\[|\\])/g,\n    SHOULD_RENDER_AS_BLOCK_R = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/,\n    TAB_R = /\\t/g,\n    TABLE_SEPARATOR_R = /^ *\\| */,\n    TABLE_TRIM_PIPES = /(^ *\\||\\| *$)/g,\n    TABLE_CELL_END_TRIM = / *$/,\n    TABLE_CENTER_ALIGN = /^ *:-+: *$/,\n    TABLE_LEFT_ALIGN = /^ *:-+ *$/,\n    TABLE_RIGHT_ALIGN = /^ *-+: *$/,\n    TEXT_BOLD_R = /^([*_])\\1((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1\\1(?!\\1)/,\n    TEXT_EMPHASIZED_R = /^([*_])((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1(?!\\1)/,\n    TEXT_STRIKETHROUGHED_R = /^~~((?:\\[.*?\\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)~~/,\n    TEXT_ESCAPED_R = /^\\\\([^0-9A-Za-z\\s])/,\n    TEXT_PLAIN_R = /^[\\s\\S]+?(?=[^0-9A-Z\\s\\u00c0-\\uffff&;.()'\"]|\\d+\\.|\\n\\n| {2,}\\n|\\w+:\\S|$)/i,\n    TRIM_NEWLINES_AND_TRAILING_WHITESPACE_R = /(^\\n+|\\n+$|\\s+$)/g,\n    HTML_LEFT_TRIM_AMOUNT_R = /^([ \\t]*)/,\n    UNESCAPE_URL_R = /\\\\([^0-9A-Z\\s])/gi,\n    LIST_BULLET = '(?:[*+-]|\\\\d+\\\\.)',\n    LIST_ITEM_PREFIX = '( *)((?:[*+-]|\\\\d+\\\\.)) +',\n    LIST_ITEM_PREFIX_R = /^( *)((?:[*+-]|\\d+\\.)) +/,\n    LIST_ITEM_R = /( *)((?:[*+-]|\\d+\\.)) +[^\\n]*(?:\\n(?!\\1(?:[*+-]|\\d+\\.) )[^\\n]*)*(\\n|$)/gm,\n    LIST_R = /^( *)((?:[*+-]|\\d+\\.)) [\\s\\S]+?(?:\\n{2,}(?! )(?!\\1(?:[*+-]|\\d+\\.) (?!(?:[*+-]|\\d+\\.) ))\\n*|\\s*\\n*$)/,\n    LINK_INSIDE = '(?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*',\n    LINK_HREF_AND_TITLE = '\\\\s*<?((?:[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+[\\'\"]([\\\\s\\\\S]*?)[\\'\"])?\\\\s*',\n    LINK_R = /^\\[((?:\\[[^\\]]*\\]|[^\\[\\]]|\\](?=[^\\[]*\\]))*)\\]\\(\\s*<?((?:[^\\s\\\\]|\\\\.)*?)>?(?:\\s+['\"]([\\s\\S]*?)['\"])?\\s*\\)/,\n    IMAGE_R = /^!\\[((?:\\[[^\\]]*\\]|[^\\[\\]]|\\](?=[^\\[]*\\]))*)\\]\\(\\s*<?((?:[^\\s\\\\]|\\\\.)*?)>?(?:\\s+['\"]([\\s\\S]*?)['\"])?\\s*\\)/,\n    BLOCK_SYNTAXES = [BLOCKQUOTE_R, CODE_BLOCK_R, CODE_BLOCK_FENCED_R, HEADING_R, HEADING_SETEXT_R, HTML_BLOCK_ELEMENT_R, HTML_COMMENT_R, HTML_SELF_CLOSING_ELEMENT_R, LIST_ITEM_R, LIST_R, NP_TABLE_R, PARAGRAPH_R];\n\nfunction containsBlockSyntax(a) {\n  return BLOCK_SYNTAXES.some(function (b) {\n    return b.test(a);\n  });\n}\n\nfunction slugify(a) {\n  return a.replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, 'a').replace(/[çÇ]/g, 'c').replace(/[ðÐ]/g, 'd').replace(/[ÈÉÊËéèêë]/g, 'e').replace(/[ÏïÎîÍíÌì]/g, 'i').replace(/[Ññ]/g, 'n').replace(/[øØœŒÕõÔôÓóÒò]/g, 'o').replace(/[ÜüÛûÚúÙù]/g, 'u').replace(/[ŸÿÝý]/g, 'y').replace(/[^a-z0-9- ]/gi, '').replace(/ /gi, '-').toLowerCase();\n}\n\nfunction parseTableAlignCapture(a) {\n  if (TABLE_RIGHT_ALIGN.test(a)) return 'right';\n  return TABLE_CENTER_ALIGN.test(a) ? 'center' : TABLE_LEFT_ALIGN.test(a) ? 'left' : null;\n}\n\nfunction parseTableRow(a, b, c) {\n  var d = c.inTable;\n  c.inTable = !0;\n  var e = b(a.trim(), c);\n  c.inTable = d;\n  var f = [[]];\n  return e.forEach(function (a, b) {\n    a.type === 'tableSeparator' ? b !== 0 && b !== e.length - 1 && f.push([]) : (a.type === 'text' && (e[b + 1] == null || e[b + 1].type === 'tableSeparator') && (a.content = a.content.replace(TABLE_CELL_END_TRIM, '')), f[f.length - 1].push(a));\n  }), f;\n}\n\nfunction parseTableAlign(a) {\n  var b = a.replace(TABLE_TRIM_PIPES, '').split('|');\n  return b.map(parseTableAlignCapture);\n}\n\nfunction parseTableCells(a, b, c) {\n  var d = a.trim().split('\\n');\n  return d.map(function (a) {\n    return parseTableRow(a, b, c);\n  });\n}\n\nfunction parseTable(a, b, c) {\n  c.inline = !0;\n  var d = parseTableRow(a[1], b, c),\n      e = parseTableAlign(a[2], b, c),\n      f = parseTableCells(a[3], b, c);\n  return c.inline = !1, {\n    align: e,\n    cells: f,\n    header: d,\n    type: 'table'\n  };\n}\n\nfunction getTableStyle(a, b) {\n  return a.align[b] == null ? {} : {\n    textAlign: a.align[b]\n  };\n}\n\nfunction normalizeAttributeKey(a) {\n  var b = a.indexOf('-');\n  return b !== -1 && a.match(HTML_CUSTOM_ATTR_R) === null && (a = a.replace(CAPTURE_LETTER_AFTER_HYPHEN, function (a, b) {\n    return b.toUpperCase();\n  })), a;\n}\n\nfunction attributeValueToJSXPropValue(a, b) {\n  return a === 'style' ? b.split(/;\\s?/).reduce(function (a, b) {\n    var c = b.slice(0, b.indexOf(':')),\n        d = c.replace(/(-[a-z])/g, function (a) {\n      return a[1].toUpperCase();\n    });\n    return a[d] = b.slice(c.length + 1).trim(), a;\n  }, {}) : a === 'href' ? sanitizeUrl(b) : (b.match(INTERPOLATION_R) && (b = b.slice(1, b.length - 1)), b === 'true' || b !== 'false' && b);\n}\n\nfunction normalizeWhitespace(a) {\n  return a.replace(CR_NEWLINE_R, '\\n').replace(FORMFEED_R, '').replace(TAB_R, '    ');\n}\n\nfunction parserFor(a) {\n  function b(d, e) {\n    for (var f = [], g = ''; d;) for (var l = 0; l < c.length;) {\n      var h = c[l],\n          j = a[h],\n          k = j.match(d, e, g);\n\n      if (k) {\n        var i = k[0];\n        d = d.substring(i.length);\n        var m = j.parse(k, b, e);\n        m.type == null && (m.type = h), f.push(m), g = i;\n        break;\n      }\n\n      l++;\n    }\n\n    return f;\n  }\n\n  var c = Object.keys(a);\n  return process.env.NODE_ENV !== 'production' && c.forEach(function (b) {\n    var c = a[b].order;\n    process.env.NODE_ENV === 'production' || typeof c == 'number' && isFinite(c) || console.warn('markdown-to-jsx: Invalid order for rule `' + b + '`: ' + c);\n  }), c.sort(function (b, c) {\n    var d = a[b].order,\n        e = a[c].order;\n    return d === e ? b < c ? -1 : 1 : d - e;\n  }), function (a, c) {\n    return b(normalizeWhitespace(a), c);\n  };\n}\n\nfunction inlineRegex(a) {\n  return function (b, c) {\n    return c.inline ? a.exec(b) : null;\n  };\n}\n\nfunction simpleInlineRegex(a) {\n  return function (b, c) {\n    return c.inline || c.simple ? a.exec(b) : null;\n  };\n}\n\nfunction blockRegex(a) {\n  return function (b, c) {\n    return c.inline || c.simple ? null : a.exec(b);\n  };\n}\n\nfunction anyScopeRegex(a) {\n  return function (b) {\n    return a.exec(b);\n  };\n}\n\nfunction reactFor(a) {\n  return function b(c, d) {\n    if (d = d || {}, Array.isArray(c)) {\n      for (var e = d.key, f = [], g = !1, h = 0; h < c.length; h++) {\n        d.key = h;\n        var j = b(c[h], d),\n            k = typeof j == 'string';\n        k && g ? f[f.length - 1] += j : f.push(j), g = k;\n      }\n\n      return d.key = e, f;\n    }\n\n    return a(c, b, d);\n  };\n}\n\nfunction sanitizeUrl(a) {\n  try {\n    var b = decodeURIComponent(a).replace(/[^A-Za-z0-9/:]/g, '');\n    if (b.match(/^\\s*(javascript|vbscript|data):/i)) return process.env.NODE_ENV !== 'production' && console.warn('Anchor URL contains an unsafe JavaScript/VBScript/data expression, it will not be rendered.', b), null;\n  } catch (b) {\n    return process.env.NODE_ENV !== 'production' && console.warn('Anchor URL could not be decoded due to malformed syntax or characters, it will not be rendered.', a), null;\n  }\n\n  return a;\n}\n\nfunction unescapeUrl(a) {\n  return a.replace(UNESCAPE_URL_R, '$1');\n}\n\nfunction parseInline(a, b, c) {\n  var d = c.inline || !1,\n      e = c.simple || !1;\n  c.inline = !0, c.simple = !0;\n  var f = a(b, c);\n  return c.inline = d, c.simple = e, f;\n}\n\nfunction parseSimpleInline(a, b, c) {\n  var d = c.inline || !1,\n      e = c.simple || !1;\n  c.inline = !1, c.simple = !0;\n  var f = a(b, c);\n  return c.inline = d, c.simple = e, f;\n}\n\nfunction parseBlock(a, b, c) {\n  return c.inline = !1, a(b + '\\n\\n', c);\n}\n\nfunction parseCaptureInline(a, b, c) {\n  return {\n    content: parseInline(b, a[1], c)\n  };\n}\n\nfunction captureNothing() {\n  return {};\n}\n\nfunction renderNothing() {\n  return null;\n}\n\nfunction ruleOutput(a) {\n  return function (b, c, d) {\n    return a[b.type].react(b, c, d);\n  };\n}\n\nfunction cx() {\n  for (var a = arguments.length, b = Array(a), c = 0; c < a; c++) b[c] = arguments[c];\n\n  return b.filter(Boolean).join(' ');\n}\n\nfunction get(a, b, c) {\n  for (var d = a, e = b.split('.'); e.length && (d = d[e[0]], d !== void 0);) e.shift();\n\n  return d || c;\n}\n\nfunction getTag(a, b) {\n  var c = get(b, a);\n  return c ? typeof c == 'function' || (typeof c == 'undefined' ? 'undefined' : _typeof(c)) === 'object' && 'render' in c ? c : get(b, a + '.component', a) : a;\n}\n\nvar PARSE_PRIORITY_MAX = 1,\n    PARSE_PRIORITY_HIGH = 2,\n    PARSE_PRIORITY_MED = 3,\n    PARSE_PRIORITY_LOW = 4,\n    PARSE_PRIORITY_MIN = 5;\nexport function compiler(a, b) {\n  function d(a, c) {\n    for (var d = get(b.overrides, a + '.props', {}), e = arguments.length, g = Array(e > 2 ? e - 2 : 0), h = 2; h < e; h++) g[h - 2] = arguments[h];\n\n    return f.apply(void 0, [getTag(a, b.overrides), _extends({}, c, d, {\n      className: cx(c && c.className, d.className) || void 0\n    })].concat(g));\n  }\n\n  function c(a) {\n    var c = !1;\n    b.forceInline ? c = !0 : !b.forceBlock && (c = SHOULD_RENDER_AS_BLOCK_R.test(a) === !1);\n    var e = k(j(c ? a : a.replace(TRIM_NEWLINES_AND_TRAILING_WHITESPACE_R, '') + '\\n\\n', {\n      inline: c\n    })),\n        f = void 0;\n    return e.length > 1 ? f = c ? d('span', {\n      key: 'outer'\n    }, e) : d('div', {\n      key: 'outer'\n    }, e) : e.length === 1 ? (f = e[0], typeof f == 'string' && (f = d('span', {\n      key: 'outer'\n    }, f))) : f = d('span', {\n      key: 'outer'\n    }), f;\n  }\n\n  function e(a) {\n    var b = a.match(ATTR_EXTRACTOR_R);\n    return b ? b.reduce(function (a, b, d) {\n      var e = b.indexOf('=');\n\n      if (e !== -1) {\n        var f = normalizeAttributeKey(b.slice(0, e)).trim(),\n            g = unquote(b.slice(e + 1).trim()),\n            h = ATTRIBUTE_TO_JSX_PROP_MAP[f] || f,\n            i = a[h] = attributeValueToJSXPropValue(f, g);\n        (HTML_BLOCK_ELEMENT_R.test(i) || HTML_SELF_CLOSING_ELEMENT_R.test(i)) && (a[h] = React.cloneElement(c(i.trim()), {\n          key: d\n        }));\n      } else b !== 'style' && (a[ATTRIBUTE_TO_JSX_PROP_MAP[b] || b] = !0);\n\n      return a;\n    }, {}) : void 0;\n  }\n\n  b = b || {}, b.overrides = b.overrides || {}, b.slugify = b.slugify || slugify, b.namedCodesToUnicode = b.namedCodesToUnicode ? _extends({}, namedCodesToUnicode, b.namedCodesToUnicode) : namedCodesToUnicode;\n  var f = b.createElement || React.createElement;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof a != 'string') throw new Error('markdown-to-jsx: the first argument must be\\n                             a string');\n    if (Object.prototype.toString.call(b.overrides) !== '[object Object]') throw new Error('markdown-to-jsx: options.overrides (second argument property) must be\\n                             undefined or an object literal with shape:\\n                             {\\n                                htmltagname: {\\n                                    component: string|ReactComponent(optional),\\n                                    props: object(optional)\\n                                }\\n                             }');\n  }\n\n  var g = [],\n      h = {},\n      i = {\n    blockQuote: {\n      match: blockRegex(BLOCKQUOTE_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse: function d(a, b, c) {\n        return {\n          content: b(a[0].replace(BLOCKQUOTE_TRIM_LEFT_MULTILINE_R, ''), c)\n        };\n      },\n      react: function e(a, b, c) {\n        return d('blockquote', {\n          key: c.key\n        }, b(a.content, c));\n      }\n    },\n    breakLine: {\n      match: anyScopeRegex(BREAK_LINE_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse: captureNothing,\n      react: function e(a, b, c) {\n        return d('br', {\n          key: c.key\n        });\n      }\n    },\n    breakThematic: {\n      match: blockRegex(BREAK_THEMATIC_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse: captureNothing,\n      react: function e(a, b, c) {\n        return d('hr', {\n          key: c.key\n        });\n      }\n    },\n    codeBlock: {\n      match: blockRegex(CODE_BLOCK_R),\n      order: PARSE_PRIORITY_MAX,\n      parse: function c(a) {\n        var b = a[0].replace(/^ {4}/gm, '').replace(/\\n+$/, '');\n        return {\n          content: b,\n          lang: void 0\n        };\n      },\n      react: function e(a, b, c) {\n        return d('pre', {\n          key: c.key\n        }, d('code', {\n          className: a.lang ? 'lang-' + a.lang : ''\n        }, a.content));\n      }\n    },\n    codeFenced: {\n      match: blockRegex(CODE_BLOCK_FENCED_R),\n      order: PARSE_PRIORITY_MAX,\n      parse: function b(a) {\n        return {\n          content: a[3],\n          lang: a[2] || void 0,\n          type: 'codeBlock'\n        };\n      }\n    },\n    codeInline: {\n      match: simpleInlineRegex(CODE_INLINE_R),\n      order: PARSE_PRIORITY_LOW,\n      parse: function b(a) {\n        return {\n          content: a[2]\n        };\n      },\n      react: function e(a, b, c) {\n        return d('code', {\n          key: c.key\n        }, a.content);\n      }\n    },\n    footnote: {\n      match: blockRegex(FOOTNOTE_R),\n      order: PARSE_PRIORITY_MAX,\n      parse: function b(a) {\n        return g.push({\n          footnote: a[2],\n          identifier: a[1]\n        }), {};\n      },\n      react: renderNothing\n    },\n    footnoteReference: {\n      match: inlineRegex(FOOTNOTE_REFERENCE_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse: function c(a) {\n        return {\n          content: a[1],\n          target: '#' + b.slugify(a[1])\n        };\n      },\n      react: function e(a, b, c) {\n        return d('a', {\n          key: c.key,\n          href: sanitizeUrl(a.target)\n        }, d('sup', {\n          key: c.key\n        }, a.content));\n      }\n    },\n    gfmTask: {\n      match: inlineRegex(GFM_TASK_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse: function b(a) {\n        return {\n          completed: a[1].toLowerCase() === 'x'\n        };\n      },\n      react: function e(a, b, c) {\n        return d('input', {\n          checked: a.completed,\n          key: c.key,\n          readOnly: !0,\n          type: 'checkbox'\n        });\n      }\n    },\n    heading: {\n      match: blockRegex(HEADING_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse: function e(a, c, d) {\n        return {\n          content: parseInline(c, a[2], d),\n          id: b.slugify(a[2]),\n          level: a[1].length\n        };\n      },\n      react: function f(a, b, c) {\n        var e = 'h' + a.level;\n        return d(e, {\n          id: a.id,\n          key: c.key\n        }, b(a.content, c));\n      }\n    },\n    headingSetext: {\n      match: blockRegex(HEADING_SETEXT_R),\n      order: PARSE_PRIORITY_MAX,\n      parse: function d(a, b, c) {\n        return {\n          content: parseInline(b, a[1], c),\n          level: a[2] === '=' ? 1 : 2,\n          type: 'heading'\n        };\n      }\n    },\n    htmlComment: {\n      match: anyScopeRegex(HTML_COMMENT_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse: function a() {\n        return {};\n      },\n      react: renderNothing\n    },\n    image: {\n      match: simpleInlineRegex(IMAGE_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse: function b(a) {\n        return {\n          alt: a[1],\n          target: unescapeUrl(a[2]),\n          title: a[3]\n        };\n      },\n      react: function e(a, b, c) {\n        return d('img', {\n          key: c.key,\n          alt: a.alt || void 0,\n          title: a.title || void 0,\n          src: sanitizeUrl(a.target)\n        });\n      }\n    },\n    link: {\n      match: inlineRegex(LINK_R, !1),\n      order: PARSE_PRIORITY_LOW,\n      parse: function d(a, b, c) {\n        return {\n          content: parseSimpleInline(b, a[1], c),\n          target: unescapeUrl(a[2]),\n          title: a[3]\n        };\n      },\n      react: function e(a, b, c) {\n        return d('a', {\n          key: c.key,\n          href: sanitizeUrl(a.target),\n          title: a.title\n        }, b(a.content, c));\n      }\n    },\n    linkAngleBraceStyleDetector: {\n      match: inlineRegex(LINK_AUTOLINK_R),\n      order: PARSE_PRIORITY_MAX,\n      parse: function b(a) {\n        return {\n          content: [{\n            content: a[1],\n            type: 'text'\n          }],\n          target: a[1],\n          type: 'link'\n        };\n      }\n    },\n    linkBareUrlDetector: {\n      match: inlineRegex(LINK_AUTOLINK_BARE_URL_R),\n      order: PARSE_PRIORITY_MAX,\n      parse: function b(a) {\n        return {\n          content: [{\n            content: a[1],\n            type: 'text'\n          }],\n          target: a[1],\n          title: void 0,\n          type: 'link'\n        };\n      }\n    },\n    linkMailtoDetector: {\n      match: inlineRegex(LINK_AUTOLINK_MAILTO_R),\n      order: PARSE_PRIORITY_MAX,\n      parse: function d(a) {\n        var b = a[1],\n            c = a[1];\n        return AUTOLINK_MAILTO_CHECK_R.test(c) || (c = 'mailto:' + c), {\n          content: [{\n            content: b.replace('mailto:', ''),\n            type: 'text'\n          }],\n          target: c,\n          type: 'link'\n        };\n      }\n    },\n    list: {\n      match: function f(a, b, c) {\n        var d = LIST_LOOKBEHIND_R.exec(c),\n            e = b._list || !b.inline;\n        return d && e ? (a = d[1] + a, LIST_R.exec(a)) : null;\n      },\n      order: PARSE_PRIORITY_HIGH,\n      parse: function j(a, b, c) {\n        var d = a[2],\n            e = d.length > 1,\n            f = e ? +d : void 0,\n            g = a[0].replace(BLOCK_END_R, '\\n').match(LIST_ITEM_R),\n            h = !1,\n            i = g.map(function (a, d) {\n          var e = LIST_ITEM_PREFIX_R.exec(a)[0].length,\n              f = new RegExp('^ {1,' + e + '}', 'gm'),\n              i = a.replace(f, '').replace(LIST_ITEM_PREFIX_R, ''),\n              j = d === g.length - 1,\n              k = i.indexOf('\\n\\n') !== -1,\n              l = k || j && h;\n          h = l;\n          var m = c.inline,\n              n = c._list;\n          c._list = !0;\n          var o;\n          l ? (c.inline = !1, o = i.replace(LIST_ITEM_END_R, '\\n\\n')) : (c.inline = !0, o = i.replace(LIST_ITEM_END_R, ''));\n          var p = b(o, c);\n          return c.inline = m, c._list = n, p;\n        });\n        return {\n          items: i,\n          ordered: e,\n          start: f\n        };\n      },\n      react: function f(a, b, c) {\n        var e = a.ordered ? 'ol' : 'ul';\n        return d(e, {\n          key: c.key,\n          start: a.start\n        }, a.items.map(function (a, e) {\n          return d('li', {\n            key: e\n          }, b(a, c));\n        }));\n      }\n    },\n    newlineCoalescer: {\n      match: blockRegex(CONSECUTIVE_NEWLINE_R),\n      order: PARSE_PRIORITY_LOW,\n      parse: captureNothing,\n      react: function a() {\n        return '\\n';\n      }\n    },\n    paragraph: {\n      match: blockRegex(PARAGRAPH_R),\n      order: PARSE_PRIORITY_LOW,\n      parse: parseCaptureInline,\n      react: function e(a, b, c) {\n        return d('p', {\n          key: c.key\n        }, b(a.content, c));\n      }\n    },\n    ref: {\n      match: inlineRegex(REFERENCE_IMAGE_OR_LINK),\n      order: PARSE_PRIORITY_MAX,\n      parse: function b(a) {\n        return h[a[1]] = {\n          target: a[2],\n          title: a[4]\n        }, {};\n      },\n      react: renderNothing\n    },\n    refImage: {\n      match: simpleInlineRegex(REFERENCE_IMAGE_R),\n      order: PARSE_PRIORITY_MAX,\n      parse: function b(a) {\n        return {\n          alt: a[1] || void 0,\n          ref: a[2]\n        };\n      },\n      react: function e(a, b, c) {\n        return d('img', {\n          key: c.key,\n          alt: a.alt,\n          src: sanitizeUrl(h[a.ref].target),\n          title: h[a.ref].title\n        });\n      }\n    },\n    refLink: {\n      match: inlineRegex(REFERENCE_LINK_R),\n      order: PARSE_PRIORITY_MAX,\n      parse: function d(a, b, c) {\n        return {\n          content: b(a[1], c),\n          fallbackContent: b(a[0].replace(SQUARE_BRACKETS_R, '\\\\$1'), c),\n          ref: a[2]\n        };\n      },\n      react: function e(a, b, c) {\n        return h[a.ref] ? d('a', {\n          key: c.key,\n          href: sanitizeUrl(h[a.ref].target),\n          title: h[a.ref].title\n        }, b(a.content, c)) : d('span', {\n          key: c.key\n        }, b(a.fallbackContent, c));\n      }\n    },\n    table: {\n      match: blockRegex(NP_TABLE_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse: parseTable,\n      react: function f(a, b, e) {\n        return d('table', {\n          key: e.key\n        }, d('thead', null, d('tr', null, a.header.map(function (c, f) {\n          return d('th', {\n            key: f,\n            style: getTableStyle(a, f)\n          }, b(c, e));\n        }))), d('tbody', null, a.cells.map(function (c, f) {\n          return d('tr', {\n            key: f\n          }, c.map(function (f, g) {\n            return d('td', {\n              key: g,\n              style: getTableStyle(a, g)\n            }, b(f, e));\n          }));\n        })));\n      }\n    },\n    tableSeparator: {\n      match: function c(a, b) {\n        return b.inTable ? TABLE_SEPARATOR_R.exec(a) : null;\n      },\n      order: PARSE_PRIORITY_HIGH,\n      parse: function a() {\n        return {\n          type: 'tableSeparator'\n        };\n      },\n      react: function a() {\n        return ' | ';\n      }\n    },\n    text: {\n      match: anyScopeRegex(TEXT_PLAIN_R),\n      order: PARSE_PRIORITY_MIN,\n      parse: function c(a) {\n        return {\n          content: a[0].replace(HTML_CHAR_CODE_R, function (a, c) {\n            return b.namedCodesToUnicode[c] ? b.namedCodesToUnicode[c] : a;\n          })\n        };\n      },\n      react: function b(a) {\n        return a.content;\n      }\n    },\n    textBolded: {\n      match: simpleInlineRegex(TEXT_BOLD_R),\n      order: PARSE_PRIORITY_MED,\n      parse: function d(a, b, c) {\n        return {\n          content: b(a[2], c)\n        };\n      },\n      react: function e(a, b, c) {\n        return d('strong', {\n          key: c.key\n        }, b(a.content, c));\n      }\n    },\n    textEmphasized: {\n      match: simpleInlineRegex(TEXT_EMPHASIZED_R),\n      order: PARSE_PRIORITY_LOW,\n      parse: function d(a, b, c) {\n        return {\n          content: b(a[2], c)\n        };\n      },\n      react: function e(a, b, c) {\n        return d('em', {\n          key: c.key\n        }, b(a.content, c));\n      }\n    },\n    textEscaped: {\n      match: simpleInlineRegex(TEXT_ESCAPED_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse: function b(a) {\n        return {\n          content: a[1],\n          type: 'text'\n        };\n      }\n    },\n    textStrikethroughed: {\n      match: simpleInlineRegex(TEXT_STRIKETHROUGHED_R),\n      order: PARSE_PRIORITY_LOW,\n      parse: parseCaptureInline,\n      react: function e(a, b, c) {\n        return d('del', {\n          key: c.key\n        }, b(a.content, c));\n      }\n    }\n  };\n  b.disableParsingRawHTML !== !0 && (i.htmlBlock = {\n    match: anyScopeRegex(HTML_BLOCK_ELEMENT_R),\n    order: PARSE_PRIORITY_HIGH,\n    parse: function l(a, b, c) {\n      var d = a[3].match(HTML_LEFT_TRIM_AMOUNT_R),\n          f = d[1],\n          g = new RegExp('^' + f, 'gm'),\n          h = a[3].replace(g, ''),\n          i = containsBlockSyntax(h) ? parseBlock : parseInline,\n          j = a[1].toLowerCase(),\n          k = DO_NOT_PROCESS_HTML_ELEMENTS.indexOf(j) !== -1;\n      return {\n        attrs: e(a[2]),\n        content: k ? a[3] : i(b, h, c),\n        noInnerParse: k,\n        tag: k ? j : a[1]\n      };\n    },\n    react: function e(a, b, c) {\n      return d(a.tag, _extends({\n        key: c.key\n      }, a.attrs), a.noInnerParse ? a.content : b(a.content, c));\n    }\n  }, i.htmlSelfClosing = {\n    match: anyScopeRegex(HTML_SELF_CLOSING_ELEMENT_R),\n    order: PARSE_PRIORITY_HIGH,\n    parse: function b(a) {\n      return {\n        attrs: e(a[2] || ''),\n        tag: a[1]\n      };\n    },\n    react: function e(a, b, c) {\n      return d(a.tag, _extends({}, a.attrs, {\n        key: c.key\n      }));\n    }\n  });\n  var j = parserFor(i),\n      k = reactFor(ruleOutput(i)),\n      l = c(function (a) {\n    return a.replace(/<!--[\\s\\S]*?(?:-->)/g, '');\n  }(a));\n  return g.length && l.props.children.push(d('footer', {\n    key: 'footer'\n  }, g.map(function (a) {\n    return d('div', {\n      id: b.slugify(a.identifier),\n      key: a.identifier\n    }, a.identifier, k(j(a.footnote, {\n      inline: !0\n    })));\n  }))), l;\n}\nexport default function Markdown(a) {\n  var b = a.children,\n      c = a.options,\n      d = _objectWithoutProperties(a, ['children', 'options']);\n\n  return React.cloneElement(compiler(b, c), d);\n}\n\nif (process.env.NODE_ENV !== 'production') {\n  var PropTypes = require('prop-types');\n\n  Markdown.propTypes = {\n    children: PropTypes.string.isRequired,\n    options: PropTypes.object\n  };\n}","map":{"version":3,"mappings":"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","names":["React","unquote","ATTRIBUTE_TO_JSX_PROP_MAP","accesskey","allowfullscreen","allowtransparency","autocomplete","autofocus","autoplay","cellpadding","cellspacing","charset","class","classid","colspan","contenteditable","contextmenu","crossorigin","enctype","for","formaction","formenctype","formmethod","formnovalidate","formtarget","frameborder","hreflang","inputmode","keyparams","keytype","marginheight","marginwidth","maxlength","mediagroup","minlength","novalidate","radiogroup","readonly","rowspan","spellcheck","srcdoc","srclang","srcset","tabindex","usemap","namedCodesToUnicode","amp","apos","gt","lt","nbsp","quot","DO_NOT_PROCESS_HTML_ELEMENTS","ATTR_EXTRACTOR_R","AUTOLINK_MAILTO_CHECK_R","BLOCK_END_R","BLOCKQUOTE_R","BLOCKQUOTE_TRIM_LEFT_MULTILINE_R","BREAK_LINE_R","BREAK_THEMATIC_R","CODE_BLOCK_FENCED_R","CODE_BLOCK_R","CODE_INLINE_R","CONSECUTIVE_NEWLINE_R","CR_NEWLINE_R","FOOTNOTE_R","FOOTNOTE_REFERENCE_R","FORMFEED_R","GFM_TASK_R","HEADING_R","HEADING_SETEXT_R","HTML_BLOCK_ELEMENT_R","HTML_CHAR_CODE_R","HTML_COMMENT_R","HTML_CUSTOM_ATTR_R","HTML_SELF_CLOSING_ELEMENT_R","INTERPOLATION_R","LINK_AUTOLINK_BARE_URL_R","LINK_AUTOLINK_MAILTO_R","LINK_AUTOLINK_R","LIST_ITEM_END_R","LIST_LOOKBEHIND_R","CAPTURE_LETTER_AFTER_HYPHEN","NP_TABLE_R","PARAGRAPH_R","REFERENCE_IMAGE_OR_LINK","REFERENCE_IMAGE_R","REFERENCE_LINK_R","SQUARE_BRACKETS_R","SHOULD_RENDER_AS_BLOCK_R","TAB_R","TABLE_SEPARATOR_R","TABLE_TRIM_PIPES","TABLE_CELL_END_TRIM","TABLE_CENTER_ALIGN","TABLE_LEFT_ALIGN","TABLE_RIGHT_ALIGN","TEXT_BOLD_R","TEXT_EMPHASIZED_R","TEXT_STRIKETHROUGHED_R","TEXT_ESCAPED_R","TEXT_PLAIN_R","TRIM_NEWLINES_AND_TRAILING_WHITESPACE_R","HTML_LEFT_TRIM_AMOUNT_R","UNESCAPE_URL_R","LIST_BULLET","LIST_ITEM_PREFIX","LIST_ITEM_PREFIX_R","LIST_ITEM_R","LIST_R","LINK_INSIDE","LINK_HREF_AND_TITLE","LINK_R","IMAGE_R","BLOCK_SYNTAXES","containsBlockSyntax","a","some","b","test","slugify","replace","toLowerCase","parseTableAlignCapture","parseTableRow","c","d","inTable","e","trim","f","forEach","type","length","push","content","parseTableAlign","split","map","parseTableCells","parseTable","inline","align","cells","header","getTableStyle","textAlign","normalizeAttributeKey","indexOf","match","toUpperCase","attributeValueToJSXPropValue","reduce","slice","sanitizeUrl","normalizeWhitespace","parserFor","g","l","h","j","k","i","substring","m","parse","Object","keys","process","env","NODE_ENV","order","isFinite","console","warn","sort","inlineRegex","exec","simpleInlineRegex","simple","blockRegex","anyScopeRegex","reactFor","Array","isArray","key","decodeURIComponent","unescapeUrl","parseInline","parseSimpleInline","parseBlock","parseCaptureInline","captureNothing","renderNothing","ruleOutput","react","cx","arguments","filter","Boolean","join","get","shift","getTag","PARSE_PRIORITY_MAX","PARSE_PRIORITY_HIGH","PARSE_PRIORITY_MED","PARSE_PRIORITY_LOW","PARSE_PRIORITY_MIN","compiler","overrides","className","forceInline","forceBlock","cloneElement","createElement","Error","prototype","toString","call","blockQuote","breakLine","breakThematic","codeBlock","lang","codeFenced","codeInline","footnote","identifier","footnoteReference","target","href","gfmTask","completed","checked","readOnly","heading","id","level","headingSetext","htmlComment","image","alt","title","src","link","linkAngleBraceStyleDetector","linkBareUrlDetector","linkMailtoDetector","list","_list","RegExp","n","o","p","items","ordered","start","newlineCoalescer","paragraph","ref","refImage","refLink","fallbackContent","table","style","tableSeparator","text","textBolded","textEmphasized","textEscaped","textStrikethroughed","disableParsingRawHTML","htmlBlock","attrs","noInnerParse","tag","htmlSelfClosing","props","children","Markdown","options","PropTypes","require","propTypes","string","isRequired","object"],"sources":["/Users/sebastien/Sebbe's Cloud/School/OpenClassRooms/2 - OCR - Software Developper - JS & React/Projet 12 (60h)/P12 - Mission/0Code/frontend/node_modules/markdown-to-jsx/index.js"],"sourcesContent":["/* @jsx h */\n/**\n * markdown-to-jsx@6 is a fork of [simple-markdown v0.2.2](https://github.com/Khan/simple-markdown)\n * from Khan Academy. Thank you Khan devs for making such an awesome and extensible\n * parsing infra... without it, half of the optimizations here wouldn't be feasible. 🙏🏼\n */\nimport React from 'react';\nimport unquote from 'unquote';\n\n/** TODO: Drop for React 16? */\nconst ATTRIBUTE_TO_JSX_PROP_MAP = {\n  accesskey: 'accessKey',\n  allowfullscreen: 'allowFullScreen',\n  allowtransparency: 'allowTransparency',\n  autocomplete: 'autoComplete',\n  autofocus: 'autoFocus',\n  autoplay: 'autoPlay',\n  cellpadding: 'cellPadding',\n  cellspacing: 'cellSpacing',\n  charset: 'charSet',\n  class: 'className',\n  classid: 'classId',\n  colspan: 'colSpan',\n  contenteditable: 'contentEditable',\n  contextmenu: 'contextMenu',\n  crossorigin: 'crossOrigin',\n  enctype: 'encType',\n  for: 'htmlFor',\n  formaction: 'formAction',\n  formenctype: 'formEncType',\n  formmethod: 'formMethod',\n  formnovalidate: 'formNoValidate',\n  formtarget: 'formTarget',\n  frameborder: 'frameBorder',\n  hreflang: 'hrefLang',\n  inputmode: 'inputMode',\n  keyparams: 'keyParams',\n  keytype: 'keyType',\n  marginheight: 'marginHeight',\n  marginwidth: 'marginWidth',\n  maxlength: 'maxLength',\n  mediagroup: 'mediaGroup',\n  minlength: 'minLength',\n  novalidate: 'noValidate',\n  radiogroup: 'radioGroup',\n  readonly: 'readOnly',\n  rowspan: 'rowSpan',\n  spellcheck: 'spellCheck',\n  srcdoc: 'srcDoc',\n  srclang: 'srcLang',\n  srcset: 'srcSet',\n  tabindex: 'tabIndex',\n  usemap: 'useMap',\n};\n\nconst namedCodesToUnicode = {\n  amp: '\\u0026',\n  apos: '\\u0027',\n  gt: '\\u003e',\n  lt: '\\u003c',\n  nbsp: '\\u00a0',\n  quot: '\\u201c',\n};\n\nconst DO_NOT_PROCESS_HTML_ELEMENTS = ['style', 'script'];\n\n/**\n * the attribute extractor regex looks for a valid attribute name,\n * followed by an equal sign (whitespace around the equal sign is allowed), followed\n * by one of the following:\n *\n * 1. a single quote-bounded string, e.g. 'foo'\n * 2. a double quote-bounded string, e.g. \"bar\"\n * 3. an interpolation, e.g. {something}\n *\n * JSX can be be interpolated into itself and is passed through the compiler using\n * the same options and setup as the current run.\n *\n * <Something children={<SomeOtherThing />} />\n *                      ==================\n *                              ↳ children: [<SomeOtherThing />]\n *\n * Otherwise, interpolations are handled as strings or simple booleans\n * unless HTML syntax is detected.\n *\n * <Something color={green} disabled={true} />\n *                   =====            ====\n *                     ↓                ↳ disabled: true\n *                     ↳ color: \"green\"\n *\n * Numbers are not parsed at this time due to complexities around int, float,\n * and the upcoming bigint functionality that would make handling it unwieldy.\n * Parse the string in your component as desired.\n *\n * <Something someBigNumber={123456789123456789} />\n *                           ==================\n *                                   ↳ someBigNumber: \"123456789123456789\"\n */\nconst ATTR_EXTRACTOR_R = /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi;\n\n/** TODO: Write explainers for each of these */\n\nconst AUTOLINK_MAILTO_CHECK_R = /mailto:/i;\nconst BLOCK_END_R = /\\n{2,}$/;\nconst BLOCKQUOTE_R = /^( *>[^\\n]+(\\n[^\\n]+)*\\n*)+\\n{2,}/;\nconst BLOCKQUOTE_TRIM_LEFT_MULTILINE_R = /^ *> ?/gm;\nconst BREAK_LINE_R = /^ {2,}\\n/;\nconst BREAK_THEMATIC_R = /^(?:( *[-*_]) *){3,}(?:\\n *)+\\n/;\nconst CODE_BLOCK_FENCED_R = /^\\s*(`{3,}|~{3,}) *(\\S+)? *\\n([\\s\\S]+?)\\s*\\1 *(?:\\n *)+\\n?/;\nconst CODE_BLOCK_R = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/;\nconst CODE_INLINE_R = /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/;\nconst CONSECUTIVE_NEWLINE_R = /^(?:\\n *)*\\n/;\nconst CR_NEWLINE_R = /\\r\\n?/g;\nconst FOOTNOTE_R = /^\\[\\^([^\\]]+)](:.*)\\n/;\nconst FOOTNOTE_REFERENCE_R = /^\\[\\^([^\\]]+)]/;\nconst FORMFEED_R = /\\f/g;\nconst GFM_TASK_R = /^\\s*?\\[(x|\\s)\\]/;\nconst HEADING_R = /^ *(#{1,6}) *([^\\n]+)\\n{0,2}/;\nconst HEADING_SETEXT_R = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/;\n\n/**\n * Explanation:\n *\n * 1. Look for a starting tag, preceeded by any amount of spaces\n *    ^ *<\n *\n * 2. Capture the tag name (capture 1)\n *    ([^ >/]+)\n *\n * 3. Ignore a space after the starting tag and capture the attribute portion of the tag (capture 2)\n *     ?([^>]*)\\/{0}>\n *\n * 4. Ensure a matching closing tag is present in the rest of the input string\n *    (?=[\\s\\S]*<\\/\\1>)\n *\n * 5. Capture everything until the matching closing tag -- this might include additional pairs\n *    of the same tag type found in step 2 (capture 3)\n *    ((?:[\\s\\S]*?(?:<\\1[^>]*>[\\s\\S]*?<\\/\\1>)*[\\s\\S]*?)*?)<\\/\\1>\n *\n * 6. Capture excess newlines afterward\n *    \\n*\n */\nconst HTML_BLOCK_ELEMENT_R = /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?([^>]*)\\/{0}>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1)[\\s\\S])*?)<\\/\\1>\\n*/i;\n\nconst HTML_CHAR_CODE_R = /&([a-z]+);/g;\n\nconst HTML_COMMENT_R = /^<!--.*?-->/;\n\n/**\n * borrowed from React 15(https://github.com/facebook/react/blob/894d20744cba99383ffd847dbd5b6e0800355a5c/src/renderers/dom/shared/HTMLDOMPropertyConfig.js)\n */\nconst HTML_CUSTOM_ATTR_R = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/;\n\nconst HTML_SELF_CLOSING_ELEMENT_R = /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i;\nconst INTERPOLATION_R = /^\\{.*\\}$/;\nconst LINK_AUTOLINK_BARE_URL_R = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/;\nconst LINK_AUTOLINK_MAILTO_R = /^<([^ >]+@[^ >]+)>/;\nconst LINK_AUTOLINK_R = /^<([^ >]+:\\/[^ >]+)>/;\nconst LIST_ITEM_END_R = / *\\n+$/;\nconst LIST_LOOKBEHIND_R = /(?:^|\\n)( *)$/;\nconst CAPTURE_LETTER_AFTER_HYPHEN = /-([a-z])?/gi;\nconst NP_TABLE_R = /^(.*\\|?.*)\\n *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*)\\n?/;\nconst PARAGRAPH_R = /^((?:[^\\n]|\\n(?! *\\n))+)(?:\\n *)+\\n/;\nconst REFERENCE_IMAGE_OR_LINK = /^\\[([^\\]]*)\\]:\\s*(\\S+)\\s*(\"([^\"]*)\")?/;\nconst REFERENCE_IMAGE_R = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/;\nconst REFERENCE_LINK_R = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/;\nconst SQUARE_BRACKETS_R = /(\\[|\\])/g;\nconst SHOULD_RENDER_AS_BLOCK_R = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/;\nconst TAB_R = /\\t/g;\nconst TABLE_SEPARATOR_R = /^ *\\| */;\nconst TABLE_TRIM_PIPES = /(^ *\\||\\| *$)/g;\nconst TABLE_CELL_END_TRIM = / *$/;\nconst TABLE_CENTER_ALIGN = /^ *:-+: *$/;\nconst TABLE_LEFT_ALIGN = /^ *:-+ *$/;\nconst TABLE_RIGHT_ALIGN = /^ *-+: *$/;\n\nconst TEXT_BOLD_R = /^([*_])\\1((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1\\1(?!\\1)/;\nconst TEXT_EMPHASIZED_R = /^([*_])((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1(?!\\1)/;\nconst TEXT_STRIKETHROUGHED_R = /^~~((?:\\[.*?\\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)~~/;\n\nconst TEXT_ESCAPED_R = /^\\\\([^0-9A-Za-z\\s])/;\nconst TEXT_PLAIN_R = /^[\\s\\S]+?(?=[^0-9A-Z\\s\\u00c0-\\uffff&;.()'\"]|\\d+\\.|\\n\\n| {2,}\\n|\\w+:\\S|$)/i;\nconst TRIM_NEWLINES_AND_TRAILING_WHITESPACE_R = /(^\\n+|\\n+$|\\s+$)/g;\n\nconst HTML_LEFT_TRIM_AMOUNT_R = /^([ \\t]*)/;\n\nconst UNESCAPE_URL_R = /\\\\([^0-9A-Z\\s])/gi;\n\n// recognize a `*` `-`, `+`, `1.`, `2.`... list bullet\nconst LIST_BULLET = '(?:[*+-]|\\\\d+\\\\.)';\n\n// recognize the start of a list item:\n// leading space plus a bullet plus a space (`   * `)\nconst LIST_ITEM_PREFIX = '( *)(' + LIST_BULLET + ') +';\nconst LIST_ITEM_PREFIX_R = new RegExp('^' + LIST_ITEM_PREFIX);\n\n// recognize an individual list item:\n//  * hi\n//    this is part of the same item\n//\n//    as is this, which is a new paragraph in the same item\n//\n//  * but this is not part of the same item\nconst LIST_ITEM_R = new RegExp(\n  LIST_ITEM_PREFIX +\n    '[^\\\\n]*(?:\\\\n' +\n    '(?!\\\\1' +\n    LIST_BULLET +\n    ' )[^\\\\n]*)*(\\\\n|$)',\n  'gm'\n);\n\n// check whether a list item has paragraphs: if it does,\n// we leave the newlines at the end\nconst LIST_R = new RegExp(\n  '^( *)(' +\n    LIST_BULLET +\n    ') ' +\n    '[\\\\s\\\\S]+?(?:\\\\n{2,}(?! )' +\n    '(?!\\\\1' +\n    LIST_BULLET +\n    ' (?!' +\n    LIST_BULLET +\n    ' ))\\\\n*' +\n    // the \\\\s*$ here is so that we can parse the inside of nested\n    // lists, where our content might end before we receive two `\\n`s\n    '|\\\\s*\\\\n*$)'\n);\n\nconst LINK_INSIDE = '(?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*';\nconst LINK_HREF_AND_TITLE =\n  '\\\\s*<?((?:[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+[\\'\"]([\\\\s\\\\S]*?)[\\'\"])?\\\\s*';\n\nconst LINK_R = new RegExp(\n  '^\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n);\n\nconst IMAGE_R = new RegExp(\n  '^!\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n);\n\nconst BLOCK_SYNTAXES = [\n  BLOCKQUOTE_R,\n  CODE_BLOCK_R,\n  CODE_BLOCK_FENCED_R,\n  HEADING_R,\n  HEADING_SETEXT_R,\n  HTML_BLOCK_ELEMENT_R,\n  HTML_COMMENT_R,\n  HTML_SELF_CLOSING_ELEMENT_R,\n  LIST_ITEM_R,\n  LIST_R,\n  NP_TABLE_R,\n  PARAGRAPH_R,\n];\n\nfunction containsBlockSyntax(input) {\n  return BLOCK_SYNTAXES.some(r => r.test(input));\n}\n\n// based on https://stackoverflow.com/a/18123682/1141611\n// not complete, but probably good enough\nfunction slugify(str) {\n  return str\n    .replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, 'a')\n    .replace(/[çÇ]/g, 'c')\n    .replace(/[ðÐ]/g, 'd')\n    .replace(/[ÈÉÊËéèêë]/g, 'e')\n    .replace(/[ÏïÎîÍíÌì]/g, 'i')\n    .replace(/[Ññ]/g, 'n')\n    .replace(/[øØœŒÕõÔôÓóÒò]/g, 'o')\n    .replace(/[ÜüÛûÚúÙù]/g, 'u')\n    .replace(/[ŸÿÝý]/g, 'y')\n    .replace(/[^a-z0-9- ]/gi, '')\n    .replace(/ /gi, '-')\n    .toLowerCase();\n}\n\nfunction parseTableAlignCapture(alignCapture) {\n  if (TABLE_RIGHT_ALIGN.test(alignCapture)) {\n    return 'right';\n  } else if (TABLE_CENTER_ALIGN.test(alignCapture)) {\n    return 'center';\n  } else if (TABLE_LEFT_ALIGN.test(alignCapture)) {\n    return 'left';\n  }\n\n  return null;\n}\n\nfunction parseTableRow(source, parse, state) {\n  const prevInTable = state.inTable;\n  state.inTable = true;\n  const tableRow = parse(source.trim(), state);\n  state.inTable = prevInTable;\n\n  let cells = [[]];\n  tableRow.forEach(function(node, i) {\n    if (node.type === 'tableSeparator') {\n      // Filter out empty table separators at the start/end:\n        if (i !== 0 && i !== tableRow.length - 1) {\n          // Split the current row:\n          cells.push([]);\n        }\n    } else {\n      if (node.type === 'text' && (\n        tableRow[i + 1] == null ||\n        tableRow[i + 1].type === 'tableSeparator'\n      )) {\n        node.content = node.content.replace(TABLE_CELL_END_TRIM, \"\");\n      }\n      cells[cells.length - 1].push(node);\n    }\n  });\n  return cells;\n}\n\nfunction parseTableAlign(source /*, parse, state*/) {\n  const alignText = source\n    .replace(TABLE_TRIM_PIPES, '')\n    .split('|');\n\n  return alignText.map(parseTableAlignCapture);\n}\n\nfunction parseTableCells(source, parse, state) {\n  const rowsText = source\n    .trim()\n    .split('\\n');\n\n  return rowsText.map(function(rowText) {\n      return parseTableRow(rowText, parse, state);\n  });\n}\n\nfunction parseTable(capture, parse, state) {\n  state.inline = true;\n  const header = parseTableRow(capture[1], parse, state);\n  const align = parseTableAlign(capture[2], parse, state);\n  const cells = parseTableCells(capture[3], parse, state);\n  state.inline = false;\n\n  return {\n    align: align,\n    cells: cells,\n    header: header,\n    type: 'table',\n  };\n}\n\nfunction getTableStyle(node, colIndex) {\n  return node.align[colIndex] == null\n    ? {}\n    : {\n        textAlign: node.align[colIndex],\n      };\n}\n\n/** TODO: remove for react 16 */\nfunction normalizeAttributeKey(key) {\n  const hyphenIndex = key.indexOf('-');\n\n  if (hyphenIndex !== -1 && key.match(HTML_CUSTOM_ATTR_R) === null) {\n    key = key.replace(CAPTURE_LETTER_AFTER_HYPHEN, function(_, letter) {\n      return letter.toUpperCase();\n    });\n  }\n\n  return key;\n}\n\nfunction attributeValueToJSXPropValue(key, value) {\n  if (key === 'style') {\n    return value.split(/;\\s?/).reduce(function(styles, kvPair) {\n      const key = kvPair.slice(0, kvPair.indexOf(':'));\n\n      // snake-case to camelCase\n      // also handles PascalCasing vendor prefixes\n      const camelCasedKey = key.replace(/(-[a-z])/g, substr =>\n        substr[1].toUpperCase()\n      );\n\n      // key.length + 1 to skip over the colon\n      styles[camelCasedKey] = kvPair.slice(key.length + 1).trim();\n\n      return styles;\n    }, {});\n  } else if (key === 'href') {\n    return sanitizeUrl(value)\n  } else if (value.match(INTERPOLATION_R)) {\n    // return as a string and let the consumer decide what to do with it\n    value = value.slice(1, value.length - 1);\n  }\n\n  if (value === 'true') {\n    return true;\n  } else if (value === 'false') {\n    return false;\n  }\n\n  return value;\n}\n\nfunction normalizeWhitespace(source) {\n  return source\n    .replace(CR_NEWLINE_R, '\\n')\n    .replace(FORMFEED_R, '')\n    .replace(TAB_R, '    ');\n}\n\n/**\n * Creates a parser for a given set of rules, with the precedence\n * specified as a list of rules.\n *\n * @rules: an object containing\n * rule type -> {match, order, parse} objects\n * (lower order is higher precedence)\n * (Note: `order` is added to defaultRules after creation so that\n *  the `order` of defaultRules in the source matches the `order`\n *  of defaultRules in terms of `order` fields.)\n *\n * @returns The resulting parse function, with the following parameters:\n *   @source: the input source string to be parsed\n *   @state: an optional object to be threaded through parse\n *     calls. Allows clients to add stateful operations to\n *     parsing, such as keeping track of how many levels deep\n *     some nesting is. For an example use-case, see passage-ref\n *     parsing in src/widgets/passage/passage-markdown.jsx\n */\nfunction parserFor(rules) {\n  // Sorts rules in order of increasing order, then\n  // ascending rule name in case of ties.\n  let ruleList = Object.keys(rules);\n\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production') {\n    ruleList.forEach(function(type) {\n      let order = rules[type].order;\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        (typeof order !== 'number' || !isFinite(order))\n      ) {\n        console.warn(\n          'markdown-to-jsx: Invalid order for rule `' + type + '`: ' + order\n        );\n      }\n    });\n  }\n\n  ruleList.sort(function(typeA, typeB) {\n    let orderA = rules[typeA].order;\n    let orderB = rules[typeB].order;\n\n    // First sort based on increasing order\n    if (orderA !== orderB) {\n      return orderA - orderB;\n\n      // Then based on increasing unicode lexicographic ordering\n    } else if (typeA < typeB) {\n      return -1;\n    }\n\n    return 1;\n  });\n\n  function nestedParse(source, state) {\n    let result = [];\n\n    // We store the previous capture so that match functions can\n    // use some limited amount of lookbehind. Lists use this to\n    // ensure they don't match arbitrary '- ' or '* ' in inline\n    // text (see the list rule for more information).\n    let prevCapture = '';\n    while (source) {\n      let i = 0;\n      while (i < ruleList.length) {\n        const ruleType = ruleList[i];\n        const rule = rules[ruleType];\n        const capture = rule.match(source, state, prevCapture);\n\n        if (capture) {\n          const currCaptureString = capture[0];\n          source = source.substring(currCaptureString.length);\n          const parsed = rule.parse(capture, nestedParse, state);\n\n          // We also let rules override the default type of\n          // their parsed node if they would like to, so that\n          // there can be a single output function for all links,\n          // even if there are several rules to parse them.\n          if (parsed.type == null) {\n            parsed.type = ruleType;\n          }\n\n          result.push(parsed);\n\n          prevCapture = currCaptureString;\n          break;\n        }\n\n        i++;\n      }\n    }\n\n    return result;\n  }\n\n  return function outerParse(source, state) {\n    return nestedParse(normalizeWhitespace(source), state);\n  };\n}\n\n// Creates a match function for an inline scoped or simple element from a regex\nfunction inlineRegex(regex) {\n  return function match(source, state) {\n    if (state.inline) {\n      return regex.exec(source);\n    } else {\n      return null;\n    }\n  };\n}\n\n// basically any inline element except links\nfunction simpleInlineRegex(regex) {\n  return function match(source, state) {\n    if (state.inline || state.simple) {\n      return regex.exec(source);\n    } else {\n      return null;\n    }\n  };\n}\n\n// Creates a match function for a block scoped element from a regex\nfunction blockRegex(regex) {\n  return function match(source, state) {\n    if (state.inline || state.simple) {\n      return null;\n    } else {\n      return regex.exec(source);\n    }\n  };\n}\n\n// Creates a match function from a regex, ignoring block/inline scope\nfunction anyScopeRegex(regex) {\n  return function match(source /*, state*/) {\n    return regex.exec(source);\n  };\n}\n\nfunction reactFor(outputFunc) {\n  return function nestedReactOutput(ast, state) {\n    state = state || {};\n    if (Array.isArray(ast)) {\n      const oldKey = state.key;\n      const result = [];\n\n      // map nestedOutput over the ast, except group any text\n      // nodes together into a single string output.\n      let lastWasString = false;\n\n      for (let i = 0; i < ast.length; i++) {\n        state.key = i;\n\n        const nodeOut = nestedReactOutput(ast[i], state);\n        const isString = typeof nodeOut === 'string';\n\n        if (isString && lastWasString) {\n          result[result.length - 1] += nodeOut;\n        } else {\n          result.push(nodeOut);\n        }\n\n        lastWasString = isString;\n      }\n\n      state.key = oldKey;\n\n      return result;\n    }\n\n    return outputFunc(ast, nestedReactOutput, state);\n  };\n}\n\nfunction sanitizeUrl(url) {\n  try {\n    const decoded = decodeURIComponent(url)\n      .replace(/[^A-Za-z0-9/:]/g, '');\n\n    if (decoded.match(/^\\s*(javascript|vbscript|data):/i)) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(\n          'Anchor URL contains an unsafe JavaScript/VBScript/data expression, it will not be rendered.',\n          decoded\n        );\n      }\n\n      return null;\n    }\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        'Anchor URL could not be decoded due to malformed syntax or characters, it will not be rendered.',\n        url\n      );\n    }\n\n    // decodeURIComponent sometimes throws a URIError\n    // See `decodeURIComponent('a%AFc');`\n    // http://stackoverflow.com/questions/9064536/javascript-decodeuricomponent-malformed-uri-exception\n    return null;\n  }\n\n  return url;\n}\n\nfunction unescapeUrl(rawUrlString) {\n  return rawUrlString.replace(UNESCAPE_URL_R, '$1');\n}\n\n/**\n * Everything inline, including links.\n */\nfunction parseInline(parse, content, state) {\n  const isCurrentlyInline = state.inline || false;\n  const isCurrentlySimple = state.simple || false;\n  state.inline = true;\n  state.simple = true;\n  const result = parse(content, state);\n  state.inline = isCurrentlyInline;\n  state.simple = isCurrentlySimple;\n  return result;\n}\n\n/**\n * Anything inline that isn't a link.\n */\nfunction parseSimpleInline(parse, content, state) {\n  const isCurrentlyInline = state.inline || false;\n  const isCurrentlySimple = state.simple || false;\n  state.inline = false;\n  state.simple = true;\n  const result = parse(content, state);\n  state.inline = isCurrentlyInline;\n  state.simple = isCurrentlySimple;\n  return result;\n}\n\nfunction parseBlock(parse, content, state) {\n  state.inline = false;\n  return parse(content + '\\n\\n', state);\n}\n\nfunction parseCaptureInline(capture, parse, state) {\n  return {\n    content: parseInline(parse, capture[1], state),\n  };\n}\n\nfunction captureNothing() {\n  return {};\n}\n\nfunction renderNothing() {\n  return null;\n}\n\nfunction ruleOutput(rules) {\n  return function nestedRuleOutput(ast, outputFunc, state) {\n    return rules[ast.type].react(ast, outputFunc, state);\n  };\n}\n\nfunction cx(...args) {\n  return args.filter(Boolean).join(' ');\n}\n\nfunction get(src, path, fb) {\n  let ptr = src;\n  const frags = path.split('.');\n\n  while (frags.length) {\n    ptr = ptr[frags[0]];\n\n    if (ptr === undefined) break;\n    else frags.shift();\n  }\n\n  return ptr || fb;\n}\n\nfunction getTag(tag, overrides) {\n  const override = get(overrides, tag);\n\n  if (!override) return tag;\n\n  return typeof override === 'function' || (typeof override === 'object' && 'render' in override)\n    ? override\n    : get(overrides, `${tag}.component`, tag);\n}\n\n/**\n * anything that must scan the tree before everything else\n */\nconst PARSE_PRIORITY_MAX = 1;\n\n/**\n * scans for block-level constructs\n */\nconst PARSE_PRIORITY_HIGH = 2;\n\n/**\n * inline w/ more priority than other inline\n */\nconst PARSE_PRIORITY_MED = 3;\n\n/**\n * inline elements\n */\nconst PARSE_PRIORITY_LOW = 4;\n\n/**\n * bare text and stuff that is considered leftovers\n */\nconst PARSE_PRIORITY_MIN = 5;\n\nexport function compiler(markdown, options) {\n  options = options || {};\n  options.overrides = options.overrides || {};\n  options.slugify = options.slugify || slugify;\n  options.namedCodesToUnicode = options.namedCodesToUnicode \n    ? {...namedCodesToUnicode, ...options.namedCodesToUnicode}\n    : namedCodesToUnicode;\n\n  const createElementFn = options.createElement || React.createElement;\n\n  // eslint-disable-next-line no-unused-vars\n  function h(tag, props, ...children) {\n    const overrideProps = get(options.overrides, `${tag}.props`, {});\n\n    return createElementFn(\n      getTag(tag, options.overrides),\n      {\n        ...props,\n        ...overrideProps,\n        className:\n          cx(props && props.className, overrideProps.className) || undefined,\n      },\n      ...children\n    );\n  }\n\n  function compile(input) {\n    let inline = false;\n\n    if (options.forceInline) {\n      inline = true;\n    } else if (!options.forceBlock) {\n      /**\n       * should not contain any block-level markdown like newlines, lists, headings,\n       * thematic breaks, blockquotes, tables, etc\n       */\n      inline = SHOULD_RENDER_AS_BLOCK_R.test(input) === false;\n    }\n\n    const arr = emitter(\n      parser(\n        inline\n          ? input\n          : `${input.replace(TRIM_NEWLINES_AND_TRAILING_WHITESPACE_R, '')}\\n\\n`,\n        { inline }\n      )\n    );\n\n    let jsx;\n    if (arr.length > 1) {\n      jsx = inline ? <span key=\"outer\">{arr}</span> : <div key=\"outer\">{arr}</div>;\n    } else if (arr.length === 1) {\n      jsx = arr[0];\n\n      // TODO: remove this for React 16\n      if (typeof jsx === 'string') {\n        jsx = <span key=\"outer\">{jsx}</span>;\n      }\n    } else {\n      // TODO: return null for React 16\n      jsx = <span key=\"outer\" />;\n    }\n\n    return jsx;\n  }\n\n  function attrStringToMap(str) {\n    const attributes = str.match(ATTR_EXTRACTOR_R);\n\n    return attributes\n      ? attributes.reduce(function(map, raw, index) {\n          const delimiterIdx = raw.indexOf('=');\n\n          if (delimiterIdx !== -1) {\n            const key = normalizeAttributeKey(\n              raw.slice(0, delimiterIdx)\n            ).trim();\n            const value = unquote(raw.slice(delimiterIdx + 1).trim());\n\n            const mappedKey = ATTRIBUTE_TO_JSX_PROP_MAP[key] || key;\n            const normalizedValue = (map[\n              mappedKey\n            ] = attributeValueToJSXPropValue(key, value));\n\n            if (\n              HTML_BLOCK_ELEMENT_R.test(normalizedValue) ||\n              HTML_SELF_CLOSING_ELEMENT_R.test(normalizedValue)\n            ) {\n              map[mappedKey] = React.cloneElement(\n                compile(normalizedValue.trim()),\n                { key: index }\n              );\n            }\n          } else if (raw !== 'style') {\n            map[ATTRIBUTE_TO_JSX_PROP_MAP[raw] || raw] = true;\n          }\n\n          return map;\n        }, {})\n      : undefined;\n  }\n\n  function stripHtmlComments(html) {\n    return html.replace(/<!--[\\s\\S]*?(?:-->)/g, '')\n  }\n\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof markdown !== 'string') {\n      throw new Error(`markdown-to-jsx: the first argument must be\n                             a string`);\n    }\n\n    if (\n      Object.prototype.toString.call(options.overrides) !== '[object Object]'\n    ) {\n      throw new Error(`markdown-to-jsx: options.overrides (second argument property) must be\n                             undefined or an object literal with shape:\n                             {\n                                htmltagname: {\n                                    component: string|ReactComponent(optional),\n                                    props: object(optional)\n                                }\n                             }`);\n    }\n  }\n\n  const footnotes = [];\n  const refs = {};\n\n  /**\n   * each rule's react() output function goes through our custom h() JSX pragma;\n   * this allows the override functionality to be automatically applied\n   */\n  const rules = {\n    blockQuote: {\n      match: blockRegex(BLOCKQUOTE_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse(capture, parse, state) {\n        return {\n          content: parse(\n            capture[0].replace(BLOCKQUOTE_TRIM_LEFT_MULTILINE_R, ''),\n            state\n          ),\n        };\n      },\n      react(node, output, state) {\n        return (\n          <blockquote key={state.key}>{output(node.content, state)}</blockquote>\n        );\n      },\n    },\n\n    breakLine: {\n      match: anyScopeRegex(BREAK_LINE_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse: captureNothing,\n      react(_, __, state) {\n        return <br key={state.key} />;\n      },\n    },\n\n    breakThematic: {\n      match: blockRegex(BREAK_THEMATIC_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse: captureNothing,\n      react(_, __, state) {\n        return <hr key={state.key} />;\n      },\n    },\n\n    codeBlock: {\n      match: blockRegex(CODE_BLOCK_R),\n      order: PARSE_PRIORITY_MAX,\n      parse(capture /*, parse, state*/) {\n        let content = capture[0].replace(/^ {4}/gm, '').replace(/\\n+$/, '');\n        return {\n          content: content,\n          lang: undefined,\n        };\n      },\n\n      react(node, output, state) {\n        return (\n          <pre key={state.key}>\n            <code className={node.lang ? `lang-${node.lang}` : ''}>\n              {node.content}\n            </code>\n          </pre>\n        );\n      },\n    },\n\n    codeFenced: {\n      match: blockRegex(CODE_BLOCK_FENCED_R),\n      order: PARSE_PRIORITY_MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: capture[3],\n          lang: capture[2] || undefined,\n          type: 'codeBlock',\n        };\n      },\n    },\n\n    codeInline: {\n      match: simpleInlineRegex(CODE_INLINE_R),\n      order: PARSE_PRIORITY_LOW,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: capture[2],\n        };\n      },\n      react(node, output, state) {\n        return <code key={state.key}>{node.content}</code>;\n      },\n    },\n\n    /**\n     * footnotes are emitted at the end of compilation in a special <footer> block\n     */\n    footnote: {\n      match: blockRegex(FOOTNOTE_R),\n      order: PARSE_PRIORITY_MAX,\n      parse(capture /*, parse, state*/) {\n        footnotes.push({\n          footnote: capture[2],\n          identifier: capture[1],\n        });\n\n        return {};\n      },\n      react: renderNothing,\n    },\n\n    footnoteReference: {\n      match: inlineRegex(FOOTNOTE_REFERENCE_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse(capture /*, parse*/) {\n        return {\n          content: capture[1],\n          target: `#${options.slugify(capture[1])}`,\n        };\n      },\n      react(node, output, state) {\n        return (\n          <a key={state.key} href={sanitizeUrl(node.target)}>\n            <sup key={state.key}>{node.content}</sup>\n          </a>\n        );\n      },\n    },\n\n    gfmTask: {\n      match: inlineRegex(GFM_TASK_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          completed: capture[1].toLowerCase() === 'x',\n        };\n      },\n      react(node, output, state) {\n        return (\n          <input\n            checked={node.completed}\n            key={state.key}\n            readOnly\n            type=\"checkbox\"\n          />\n        );\n      },\n    },\n\n    heading: {\n      match: blockRegex(HEADING_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse(capture, parse, state) {\n        return {\n          content: parseInline(parse, capture[2], state),\n          id: options.slugify(capture[2]),\n          level: capture[1].length,\n        };\n      },\n      react(node, output, state) {\n        const Tag = `h${node.level}`;\n        return (\n          <Tag id={node.id} key={state.key}>\n            {output(node.content, state)}\n          </Tag>\n        );\n      },\n    },\n\n    headingSetext: {\n      match: blockRegex(HEADING_SETEXT_R),\n      order: PARSE_PRIORITY_MAX,\n      parse(capture, parse, state) {\n        return {\n          content: parseInline(parse, capture[1], state),\n          level: capture[2] === '=' ? 1 : 2,\n          type: 'heading',\n        };\n      },\n    },\n\n    htmlComment: {\n      match: anyScopeRegex(HTML_COMMENT_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse() {\n        return {};\n      },\n      react: renderNothing,\n    },\n\n    image: {\n      match: simpleInlineRegex(IMAGE_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          alt: capture[1],\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        };\n      },\n      react(node, output, state) {\n        return (\n          <img\n            key={state.key}\n            alt={node.alt || undefined}\n            title={node.title || undefined}\n            src={sanitizeUrl(node.target)}\n          />\n        );\n      },\n    },\n\n    link: {\n      match: inlineRegex(LINK_R, false),\n      order: PARSE_PRIORITY_LOW,\n      parse(capture, parse, state) {\n        return {\n          content: parseSimpleInline(parse, capture[1], state),\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        };\n      },\n      react(node, output, state) {\n        return (\n          <a key={state.key} href={sanitizeUrl(node.target)} title={node.title}>\n            {output(node.content, state)}\n          </a>\n        );\n      },\n    },\n\n    // https://daringfireball.net/projects/markdown/syntax#autolink\n    linkAngleBraceStyleDetector: {\n      match: inlineRegex(LINK_AUTOLINK_R),\n      order: PARSE_PRIORITY_MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: [\n            {\n              content: capture[1],\n              type: 'text',\n            },\n          ],\n          target: capture[1],\n          type: 'link',\n        };\n      },\n    },\n\n    linkBareUrlDetector: {\n      match: inlineRegex(LINK_AUTOLINK_BARE_URL_R),\n      order: PARSE_PRIORITY_MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: [\n            {\n              content: capture[1],\n              type: 'text',\n            },\n          ],\n          target: capture[1],\n          title: undefined,\n          type: 'link',\n        };\n      },\n    },\n\n    linkMailtoDetector: {\n      match: inlineRegex(LINK_AUTOLINK_MAILTO_R),\n      order: PARSE_PRIORITY_MAX,\n      parse(capture /*, parse, state*/) {\n        let address = capture[1];\n        let target = capture[1];\n\n        // Check for a `mailto:` already existing in the link:\n        if (!AUTOLINK_MAILTO_CHECK_R.test(target)) {\n          target = 'mailto:' + target;\n        }\n\n        return {\n          content: [\n            {\n              content: address.replace('mailto:', ''),\n              type: 'text',\n            },\n          ],\n          target: target,\n          type: 'link',\n        };\n      },\n    },\n\n    list: {\n      match(source, state, prevCapture) {\n        // We only want to break into a list if we are at the start of a\n        // line. This is to avoid parsing \"hi * there\" with \"* there\"\n        // becoming a part of a list.\n        // You might wonder, \"but that's inline, so of course it wouldn't\n        // start a list?\". You would be correct! Except that some of our\n        // lists can be inline, because they might be inside another list,\n        // in which case we can parse with inline scope, but need to allow\n        // nested lists inside this inline scope.\n        const isStartOfLine = LIST_LOOKBEHIND_R.exec(prevCapture);\n        const isListBlock = state._list || !state.inline;\n\n        if (isStartOfLine && isListBlock) {\n          source = isStartOfLine[1] + source;\n\n          return LIST_R.exec(source);\n        } else {\n          return null;\n        }\n      },\n      order: PARSE_PRIORITY_HIGH,\n      parse(capture, parse, state) {\n        const bullet = capture[2];\n        const ordered = bullet.length > 1;\n        const start = ordered ? +bullet : undefined;\n        const items = capture[0]\n          // recognize the end of a paragraph block inside a list item:\n          // two or more newlines at end end of the item\n          .replace(BLOCK_END_R, '\\n')\n          .match(LIST_ITEM_R);\n\n        let lastItemWasAParagraph = false;\n        const itemContent = items.map(function(item, i) {\n          // We need to see how far indented the item is:\n          const space = LIST_ITEM_PREFIX_R.exec(item)[0].length;\n\n          // And then we construct a regex to \"unindent\" the subsequent\n          // lines of the items by that amount:\n          const spaceRegex = new RegExp('^ {1,' + space + '}', 'gm');\n\n          // Before processing the item, we need a couple things\n          const content = item\n            // remove indents on trailing lines:\n            .replace(spaceRegex, '')\n            // remove the bullet:\n            .replace(LIST_ITEM_PREFIX_R, '');\n\n          // Handling \"loose\" lists, like:\n          //\n          //  * this is wrapped in a paragraph\n          //\n          //  * as is this\n          //\n          //  * as is this\n          const isLastItem = i === items.length - 1;\n          const containsBlocks = content.indexOf('\\n\\n') !== -1;\n\n          // Any element in a list is a block if it contains multiple\n          // newlines. The last element in the list can also be a block\n          // if the previous item in the list was a block (this is\n          // because non-last items in the list can end with \\n\\n, but\n          // the last item can't, so we just \"inherit\" this property\n          // from our previous element).\n          const thisItemIsAParagraph =\n            containsBlocks || (isLastItem && lastItemWasAParagraph);\n          lastItemWasAParagraph = thisItemIsAParagraph;\n\n          // backup our state for restoration afterwards. We're going to\n          // want to set state._list to true, and state.inline depending\n          // on our list's looseness.\n          const oldStateInline = state.inline;\n          const oldStateList = state._list;\n          state._list = true;\n\n          // Parse inline if we're in a tight list, or block if we're in\n          // a loose list.\n          let adjustedContent;\n          if (thisItemIsAParagraph) {\n            state.inline = false;\n            adjustedContent = content.replace(LIST_ITEM_END_R, '\\n\\n');\n          } else {\n            state.inline = true;\n            adjustedContent = content.replace(LIST_ITEM_END_R, '');\n          }\n\n          const result = parse(adjustedContent, state);\n\n          // Restore our state before returning\n          state.inline = oldStateInline;\n          state._list = oldStateList;\n\n          return result;\n        });\n\n        return {\n          items: itemContent,\n          ordered: ordered,\n          start: start,\n        };\n      },\n      react(node, output, state) {\n        const Tag = node.ordered ? 'ol' : 'ul';\n\n        return (\n          <Tag key={state.key} start={node.start}>\n            {node.items.map(function generateListItem(item, i) {\n              return <li key={i}>{output(item, state)}</li>;\n            })}\n          </Tag>\n        );\n      },\n    },\n\n    newlineCoalescer: {\n      match: blockRegex(CONSECUTIVE_NEWLINE_R),\n      order: PARSE_PRIORITY_LOW,\n      parse: captureNothing,\n      react(/*node, output, state*/) {\n        return '\\n';\n      },\n    },\n\n    paragraph: {\n      match: blockRegex(PARAGRAPH_R),\n      order: PARSE_PRIORITY_LOW,\n      parse: parseCaptureInline,\n      react(node, output, state) {\n        return <p key={state.key}>{output(node.content, state)}</p>;\n      },\n    },\n\n    ref: {\n      match: inlineRegex(REFERENCE_IMAGE_OR_LINK),\n      order: PARSE_PRIORITY_MAX,\n      parse(capture /*, parse*/) {\n        refs[capture[1]] = {\n          target: capture[2],\n          title: capture[4],\n        };\n\n        return {};\n      },\n      react: renderNothing,\n    },\n\n    refImage: {\n      match: simpleInlineRegex(REFERENCE_IMAGE_R),\n      order: PARSE_PRIORITY_MAX,\n      parse(capture) {\n        return {\n          alt: capture[1] || undefined,\n          ref: capture[2],\n        };\n      },\n      react(node, output, state) {\n        return (\n          <img\n            key={state.key}\n            alt={node.alt}\n            src={sanitizeUrl(refs[node.ref].target)}\n            title={refs[node.ref].title}\n          />\n        );\n      },\n    },\n\n    refLink: {\n      match: inlineRegex(REFERENCE_LINK_R),\n      order: PARSE_PRIORITY_MAX,\n      parse(capture, parse, state) {\n        return {\n          content: parse(capture[1], state),\n          fallbackContent: parse(capture[0].replace(SQUARE_BRACKETS_R, '\\\\$1'), state),\n          ref: capture[2],\n        };\n      },\n      react(node, output, state) {\n        return refs[node.ref] ? (\n          <a\n            key={state.key}\n            href={sanitizeUrl(refs[node.ref].target)}\n            title={refs[node.ref].title}\n          >\n            {output(node.content, state)}\n          </a>\n        ) : <span key={state.key}>{output(node.fallbackContent, state)}</span>;\n      },\n    },\n\n    table: {\n      match: blockRegex(NP_TABLE_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse: parseTable,\n      react(node, output, state) {\n        return (\n          <table key={state.key}>\n            <thead>\n              <tr>\n                {node.header.map(function generateHeaderCell(content, i) {\n                  return (\n                    <th key={i} style={getTableStyle(node, i)}>\n                      {output(content, state)}\n                    </th>\n                  );\n                })}\n              </tr>\n            </thead>\n\n            <tbody>\n              {node.cells.map(function generateTableRow(row, i) {\n                return (\n                  <tr key={i}>\n                    {row.map(function generateTableCell(content, c) {\n                      return (\n                        <td key={c} style={getTableStyle(node, c)}>\n                          {output(content, state)}\n                        </td>\n                      );\n                    })}\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        );\n      },\n    },\n\n    tableSeparator: {\n      match: function(source, state) {\n        if (!state.inTable) {\n            return null;\n        }\n        return TABLE_SEPARATOR_R.exec(source);\n      },\n      order: PARSE_PRIORITY_HIGH,\n      parse: function() {\n          return { type: 'tableSeparator' };\n      },\n      // These shouldn't be reached, but in case they are, be reasonable:\n      react() { return ' | '; }\n    },\n\n    text: {\n      // Here we look for anything followed by non-symbols,\n      // double newlines, or double-space-newlines\n      // We break on any symbol characters so that this grammar\n      // is easy to extend without needing to modify this regex\n      match: anyScopeRegex(TEXT_PLAIN_R),\n      order: PARSE_PRIORITY_MIN,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: capture[0]\n            // nbsp -> unicode equivalent for named chars\n            .replace(HTML_CHAR_CODE_R, (full, inner) => {\n              return options.namedCodesToUnicode[inner]\n                ? options.namedCodesToUnicode[inner]\n                : full;\n            }),\n        };\n      },\n      react(node /*, output, state*/) {\n        return node.content;\n      },\n    },\n\n    textBolded: {\n      match: simpleInlineRegex(TEXT_BOLD_R),\n      order: PARSE_PRIORITY_MED,\n      parse(capture, parse, state) {\n        return {\n          // capture[1] -> the syntax control character\n          // capture[2] -> inner content\n          content: parse(capture[2], state),\n        };\n      },\n      react(node, output, state) {\n        return <strong key={state.key}>{output(node.content, state)}</strong>;\n      },\n    },\n\n    textEmphasized: {\n      match: simpleInlineRegex(TEXT_EMPHASIZED_R),\n      order: PARSE_PRIORITY_LOW,\n      parse(capture, parse, state) {\n        return {\n          // capture[1] -> opening * or _\n          // capture[2] -> inner content\n          content: parse(capture[2], state),\n        };\n      },\n      react(node, output, state) {\n        return <em key={state.key}>{output(node.content, state)}</em>;\n      },\n    },\n\n    textEscaped: {\n      // We don't allow escaping numbers, letters, or spaces here so that\n      // backslashes used in plain text still get rendered. But allowing\n      // escaping anything else provides a very flexible escape mechanism,\n      // regardless of how this grammar is extended.\n      match: simpleInlineRegex(TEXT_ESCAPED_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: capture[1],\n          type: 'text',\n        };\n      },\n    },\n\n    textStrikethroughed: {\n      match: simpleInlineRegex(TEXT_STRIKETHROUGHED_R),\n      order: PARSE_PRIORITY_LOW,\n      parse: parseCaptureInline,\n      react(node, output, state) {\n        return <del key={state.key}>{output(node.content, state)}</del>;\n      },\n    },\n  };\n\n  // Object.keys(rules).forEach(key => {\n  //     let { match, parse } = rules[key];\n\n  //     rules[key].match = (...args) => {\n  //         const start = performance.now();\n  //         const result = match(...args);\n  //         const delta = performance.now() - start;\n\n  //         if (delta > 5)\n  //             console.warn(\n  //                 `Slow match for ${key}: ${delta.toFixed(3)}ms, input: ${\n  //                     args[0]\n  //                 }`\n  //             );\n\n  //         return result;\n  //     };\n\n  //     rules[key].parse = (...args) => {\n  //         const start = performance.now();\n  //         const result = parse(...args);\n  //         const delta = performance.now() - start;\n\n  //         if (delta > 5)\n  //             console.warn(`Slow parse for ${key}: ${delta.toFixed(3)}ms`);\n\n  //         console.log(`${key}:parse`, `${delta.toFixed(3)}ms`, args[0]);\n\n  //         return result;\n  //     };\n  // });\n\n  if (options.disableParsingRawHTML !== true) {\n    rules.htmlBlock = {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      match: anyScopeRegex(HTML_BLOCK_ELEMENT_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse(capture, parse, state) {\n        const [, whitespace] = capture[3].match(HTML_LEFT_TRIM_AMOUNT_R);\n        const trimmer = new RegExp(`^${whitespace}`, 'gm');\n        const trimmed = capture[3].replace(trimmer, '');\n\n        const parseFunc = containsBlockSyntax(trimmed)\n          ? parseBlock\n          : parseInline;\n\n        const tagName = capture[1].toLowerCase();\n        const noInnerParse =\n          DO_NOT_PROCESS_HTML_ELEMENTS.indexOf(tagName) !== -1;\n\n        return {\n          attrs: attrStringToMap(capture[2]),\n          /**\n           * if another html block is detected within, parse as block,\n           * otherwise parse as inline to pick up any further markdown\n           */\n          content: noInnerParse ? capture[3] : parseFunc(parse, trimmed, state),\n\n          noInnerParse,\n\n          tag: noInnerParse ? tagName : capture[1]\n        };\n      },\n      react(node, output, state) {\n        return (\n          <node.tag key={state.key} {...node.attrs}>\n            {node.noInnerParse ? node.content : output(node.content, state)}\n          </node.tag>\n        );\n      },\n    }\n\n    rules.htmlSelfClosing = {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      match: anyScopeRegex(HTML_SELF_CLOSING_ELEMENT_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          attrs: attrStringToMap(capture[2] || ''),\n          tag: capture[1],\n        };\n      },\n      react(node, output, state) {\n        return <node.tag {...node.attrs} key={state.key} />;\n      },\n    };\n  }\n\n  const parser = parserFor(rules);\n  const emitter = reactFor(ruleOutput(rules));\n\n  const jsx = compile(stripHtmlComments(markdown));\n\n  if (footnotes.length) {\n    jsx.props.children.push(\n      <footer key=\"footer\">\n        {footnotes.map(function createFootnote(def) {\n          return (\n            <div id={options.slugify(def.identifier)} key={def.identifier}>\n              {def.identifier}\n              {emitter(parser(def.footnote, { inline: true }))}\n            </div>\n          );\n        })}\n      </footer>\n    );\n  }\n\n  return jsx;\n}\n\n/**\n * A simple HOC for easy React use. Feed the markdown content as a direct child\n * and the rest is taken care of automatically.\n *\n * @param  {String}   options.children   must be a string\n * @param  {Object}   options.options    markdown-to-jsx options (arg 2 of the compiler)\n *\n * @return {ReactElement} the compiled JSX\n */\n\nexport default function Markdown({ children, options, ...props }) {\n  return React.cloneElement(compiler(children, options), props);\n}\n\nif (process.env.NODE_ENV !== 'production') {\n  const PropTypes = require('prop-types');\n\n  Markdown.propTypes = {\n    children: PropTypes.string.isRequired,\n    options: PropTypes.object,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}