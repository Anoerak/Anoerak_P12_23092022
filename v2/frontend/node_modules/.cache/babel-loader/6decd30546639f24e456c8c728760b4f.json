{"ast":null,"code":"// import { useState, useEffect } from 'react';\n// const useFetch = (url, id, path) => {\n// \tconst [data, setData] = useState({});\n// \tconst [loading, setLoading] = useState(true);\n// \tconst [{ isError, errorMessage }, setError] = useState({ isError: false, errorMessage: '' });\n// \tuseEffect(() => {\n// \t\tif (!url || !id) return;\n// \t\tsetLoading(true);\n// \t\tif (!path) {\n// \t\t\tconst fetchData = async () => {\n// \t\t\t\ttry {\n// \t\t\t\t\tconst response = await fetch(url + id, {\n// \t\t\t\t\t\tmethod: 'GET',\n// \t\t\t\t\t\theaders: {\n// \t\t\t\t\t\t\t'Content-Type': 'application/json',\n// \t\t\t\t\t\t\tAccept: 'application/json',\n// \t\t\t\t\t\t},\n// \t\t\t\t\t});\n// \t\t\t\t\tconst data = await response.json();\n// \t\t\t\t\tsetData(data.data);\n// \t\t\t\t} catch (error) {\n// \t\t\t\t\tsetError({ isError: true, errorMessage: error.message });\n// \t\t\t\t} finally {\n// \t\t\t\t\tsetLoading(false);\n// \t\t\t\t}\n// \t\t\t};\n// \t\t\tfetchData();\n// \t\t} else {\n// \t\t\tconst fetchData = async () => {\n// \t\t\t\ttry {\n// \t\t\t\t\tconst response = await fetch(url + id + path, {\n// \t\t\t\t\t\tmethod: 'GET',\n// \t\t\t\t\t\theaders: {\n// \t\t\t\t\t\t\t'Content-Type': 'application/json',\n// \t\t\t\t\t\t\tAccept: 'application/json',\n// \t\t\t\t\t\t},\n// \t\t\t\t\t});\n// \t\t\t\t\tconst data = await response.json();\n// \t\t\t\t\tsetData(data.data);\n// \t\t\t\t} catch (error) {\n// \t\t\t\t\tsetError({ isError: true, errorMessage: error.message });\n// \t\t\t\t} finally {\n// \t\t\t\t\tsetLoading(false);\n// \t\t\t\t}\n// \t\t\t};\n// \t\t\tfetchData();\n// \t\t}\n// \t}, [url, id, path]);\n// \treturn { data, loading, isError, errorMessage };\n// };\n// export default useFetch;","map":{"version":3,"names":[],"sources":["/Users/sebastien/Sebbe's Cloud/School/OpenClassRooms/2 - OCR - Software Developper - JS & React/Projet 12 (60h)/P12 - Mission/0Code/frontend/src/utils/hooks/hook.jsx"],"sourcesContent":["// import { useState, useEffect } from 'react';\n\n// const useFetch = (url, id, path) => {\n// \tconst [data, setData] = useState({});\n// \tconst [loading, setLoading] = useState(true);\n// \tconst [{ isError, errorMessage }, setError] = useState({ isError: false, errorMessage: '' });\n\n// \tuseEffect(() => {\n// \t\tif (!url || !id) return;\n\n// \t\tsetLoading(true);\n\n// \t\tif (!path) {\n// \t\t\tconst fetchData = async () => {\n// \t\t\t\ttry {\n// \t\t\t\t\tconst response = await fetch(url + id, {\n// \t\t\t\t\t\tmethod: 'GET',\n// \t\t\t\t\t\theaders: {\n// \t\t\t\t\t\t\t'Content-Type': 'application/json',\n// \t\t\t\t\t\t\tAccept: 'application/json',\n// \t\t\t\t\t\t},\n// \t\t\t\t\t});\n// \t\t\t\t\tconst data = await response.json();\n// \t\t\t\t\tsetData(data.data);\n// \t\t\t\t} catch (error) {\n// \t\t\t\t\tsetError({ isError: true, errorMessage: error.message });\n// \t\t\t\t} finally {\n// \t\t\t\t\tsetLoading(false);\n// \t\t\t\t}\n// \t\t\t};\n// \t\t\tfetchData();\n// \t\t} else {\n// \t\t\tconst fetchData = async () => {\n// \t\t\t\ttry {\n// \t\t\t\t\tconst response = await fetch(url + id + path, {\n// \t\t\t\t\t\tmethod: 'GET',\n// \t\t\t\t\t\theaders: {\n// \t\t\t\t\t\t\t'Content-Type': 'application/json',\n// \t\t\t\t\t\t\tAccept: 'application/json',\n// \t\t\t\t\t\t},\n// \t\t\t\t\t});\n// \t\t\t\t\tconst data = await response.json();\n// \t\t\t\t\tsetData(data.data);\n// \t\t\t\t} catch (error) {\n// \t\t\t\t\tsetError({ isError: true, errorMessage: error.message });\n// \t\t\t\t} finally {\n// \t\t\t\t\tsetLoading(false);\n// \t\t\t\t}\n// \t\t\t};\n// \t\t\tfetchData();\n// \t\t}\n// \t}, [url, id, path]);\n\n// \treturn { data, loading, isError, errorMessage };\n// };\n\n// export default useFetch;\n"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA"},"metadata":{},"sourceType":"module"}