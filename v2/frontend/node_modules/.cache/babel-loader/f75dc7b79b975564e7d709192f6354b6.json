{"ast":null,"code":"import merge from 'lodash/merge';\nimport memoize from 'lodash/memoize';\nimport jss from './setupjss';\nimport * as theme from './theme';\n/**\n * By default lodash/memoize only uses the first argument\n * for cache rendering. It works well if the first prameter\n * is enough.\n * We are Hot Module Replacing (HMR) stylesheets.\n * Therefore, we cannot cache stylesheet only by component.\n * We need to add cssRevisions to the key fo when the css files update,\n * the revision will update and we should update the stylesheet.\n */\n\nexport default memoize(function (styles, config, componentName, cssRevision) {\n  var mergedTheme = merge({}, theme, config.theme);\n  var customStyles = typeof config.styles === 'function' ? config.styles(mergedTheme) : config.styles;\n  var mergedStyles = merge({}, styles(mergedTheme), customStyles && customStyles[componentName]);\n  return jss.createStyleSheet(mergedStyles, {\n    meta: componentName,\n    link: true\n  });\n}, // calculate the cache key here\nfunction (styles, config, componentName, cssRevision) {\n  return componentName + \"_\" + cssRevision;\n});","map":{"version":3,"names":["merge","memoize","jss","theme","styles","config","componentName","cssRevision","mergedTheme","customStyles","mergedStyles","createStyleSheet","meta","link"],"sources":["/Users/sebastien/Sebbe's Cloud/School/OpenClassRooms/2 - OCR - Software Developper - JS & React/Projet 12 (60h)/P12 - Mission/0Code/frontend/node_modules/react-styleguidist/lib/client/styles/createStyleSheet.js"],"sourcesContent":["import merge from 'lodash/merge';\nimport memoize from 'lodash/memoize';\nimport jss from './setupjss';\nimport * as theme from './theme';\n\n/**\n * By default lodash/memoize only uses the first argument\n * for cache rendering. It works well if the first prameter\n * is enough.\n * We are Hot Module Replacing (HMR) stylesheets.\n * Therefore, we cannot cache stylesheet only by component.\n * We need to add cssRevisions to the key fo when the css files update,\n * the revision will update and we should update the stylesheet.\n */\nexport default memoize(function (styles, config, componentName, cssRevision) {\n  var mergedTheme = merge({}, theme, config.theme);\n  var customStyles = typeof config.styles === 'function' ? config.styles(mergedTheme) : config.styles;\n  var mergedStyles = merge({}, styles(mergedTheme), customStyles && customStyles[componentName]);\n  return jss.createStyleSheet(mergedStyles, {\n    meta: componentName,\n    link: true\n  });\n}, // calculate the cache key here\nfunction (styles, config, componentName, cssRevision) {\n  return componentName + \"_\" + cssRevision;\n});"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,cAAlB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAO,KAAKC,KAAZ,MAAuB,SAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAeF,OAAO,CAAC,UAAUG,MAAV,EAAkBC,MAAlB,EAA0BC,aAA1B,EAAyCC,WAAzC,EAAsD;EAC3E,IAAIC,WAAW,GAAGR,KAAK,CAAC,EAAD,EAAKG,KAAL,EAAYE,MAAM,CAACF,KAAnB,CAAvB;EACA,IAAIM,YAAY,GAAG,OAAOJ,MAAM,CAACD,MAAd,KAAyB,UAAzB,GAAsCC,MAAM,CAACD,MAAP,CAAcI,WAAd,CAAtC,GAAmEH,MAAM,CAACD,MAA7F;EACA,IAAIM,YAAY,GAAGV,KAAK,CAAC,EAAD,EAAKI,MAAM,CAACI,WAAD,CAAX,EAA0BC,YAAY,IAAIA,YAAY,CAACH,aAAD,CAAtD,CAAxB;EACA,OAAOJ,GAAG,CAACS,gBAAJ,CAAqBD,YAArB,EAAmC;IACxCE,IAAI,EAAEN,aADkC;IAExCO,IAAI,EAAE;EAFkC,CAAnC,CAAP;AAID,CARqB,EAQnB;AACH,UAAUT,MAAV,EAAkBC,MAAlB,EAA0BC,aAA1B,EAAyCC,WAAzC,EAAsD;EACpD,OAAOD,aAAa,GAAG,GAAhB,GAAsBC,WAA7B;AACD,CAXqB,CAAtB"},"metadata":{},"sourceType":"module"}